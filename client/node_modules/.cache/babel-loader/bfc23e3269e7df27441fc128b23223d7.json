{"ast":null,"code":"import { gql } from \"@apollo/client/core\";\nexport const IS_LOGGED_IN = gql`\n  query IsUserLoggedIn {\n    isLoggedIn @client\n  }\n`;\nexport const LOGIN_USER = gql`\n  mutation Login($phone: String!, $password: String!) {\n    login(phone: $phone, password: $password) {\n      token\n    }\n  }\n`;\nexport const USER_ME = gql`\n  query Me {\n\tme {\n    \tid,phone,firstName,lastName,role\n  \t}\n  }\n`;\nexport const LOGOUT_USER = gql`\n\tmutation Logout {\n\t\tisLoggedIn @client\n\t}\n`;\nexport const GET_USERS = gql`\n\tquery Users($filter: UserFilterDto) {\n\t\tusers(filter: $filter) {\n    \t\tid,phone,firstName,lastName,role\n  \t\t}\n\t}\n`;\nexport const GET_USER = gql`\n  query GetUser($filter: UserFilterDto) {\n\tuser(filter: $filter) {\n    \tid,phone,firstName,lastName,email,role\n  \t}\n  }\n`;\nexport const CREATE_USER = gql`\n  mutation CreateUser($phone: String!, $password: String!, $firstName: String, $lastName: String, $email: String) {\n    create(phone: $phone, password: $password, firstName: $firstName, lastName: $lastName, email: $email) {\n      id, phone, role\n    }\n  }\n`;\nexport const UPDATE_USER = gql`\n  mutation UpdateUser($id: Float!, $phone: String, $password: String, $firstName: String, $lastName: String, $email: String) {\n    update(id: $id, phone: $phone, password: $password, firstName: $firstName, lastName: $lastName, email: $email) {\n      success, \n      user {\n      \tid,phone,firstName,lastName,role\n      }\n    }\n  }\n`;\nexport const REGISTER_USER = gql`\n  mutation Register($phone: String!, $password: String!, $firstName: String, $lastName: String, $email: String) {\n    register(phone: $phone, password: $password, firstName: $firstName, lastName: $lastName, email: $email) {\n      id, phone, token\n    }\n  }\n`;\nexport const DELETE_USER = gql`\n\tmutation DeleteUser($id: Float!) {\n\t\tdelete(id: $id) {\n    \t\tsuccess\n  \t\t}\n\t}\n`;","map":{"version":3,"sources":["/Users/apple/Documents/work/git/nest-react/client/src/process/apollo/GqlData.ts"],"names":["gql","IS_LOGGED_IN","LOGIN_USER","USER_ME","LOGOUT_USER","GET_USERS","GET_USER","CREATE_USER","UPDATE_USER","REGISTER_USER","DELETE_USER"],"mappings":"AAAA,SAAQA,GAAR,QAAkB,qBAAlB;AAEA,OAAO,MAAMC,YAAY,GAAGD,GAAI;AAChC;AACA;AACA;AACA,CAJO;AAMP,OAAO,MAAME,UAAU,GAAGF,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA,CANO;AAQP,OAAO,MAAMG,OAAO,GAAGH,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA,CANO;AAQP,OAAO,MAAMI,WAAW,GAAGJ,GAAI;AAC/B;AACA;AACA;AACA,CAJO;AAMP,OAAO,MAAMK,SAAS,GAAGL,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA,CANO;AAQP,OAAO,MAAMM,QAAQ,GAAGN,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA,CANO;AAQP,OAAO,MAAMO,WAAW,GAAGP,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA,CANO;AAQP,OAAO,MAAMQ,WAAW,GAAGR,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATO;AAWP,OAAO,MAAMS,aAAa,GAAGT,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA,CANO;AAQP,OAAO,MAAMU,WAAW,GAAGV,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA,CANO","sourcesContent":["import {gql} from \"@apollo/client/core\";\n\nexport const IS_LOGGED_IN = gql`\n  query IsUserLoggedIn {\n    isLoggedIn @client\n  }\n`;\n\nexport const LOGIN_USER = gql`\n  mutation Login($phone: String!, $password: String!) {\n    login(phone: $phone, password: $password) {\n      token\n    }\n  }\n`;\n\nexport const USER_ME = gql`\n  query Me {\n\tme {\n    \tid,phone,firstName,lastName,role\n  \t}\n  }\n`;\n\nexport const LOGOUT_USER = gql`\n\tmutation Logout {\n\t\tisLoggedIn @client\n\t}\n`;\n\nexport const GET_USERS = gql`\n\tquery Users($filter: UserFilterDto) {\n\t\tusers(filter: $filter) {\n    \t\tid,phone,firstName,lastName,role\n  \t\t}\n\t}\n`;\n\nexport const GET_USER = gql`\n  query GetUser($filter: UserFilterDto) {\n\tuser(filter: $filter) {\n    \tid,phone,firstName,lastName,email,role\n  \t}\n  }\n`;\n\nexport const CREATE_USER = gql`\n  mutation CreateUser($phone: String!, $password: String!, $firstName: String, $lastName: String, $email: String) {\n    create(phone: $phone, password: $password, firstName: $firstName, lastName: $lastName, email: $email) {\n      id, phone, role\n    }\n  }\n`;\n\nexport const UPDATE_USER = gql`\n  mutation UpdateUser($id: Float!, $phone: String, $password: String, $firstName: String, $lastName: String, $email: String) {\n    update(id: $id, phone: $phone, password: $password, firstName: $firstName, lastName: $lastName, email: $email) {\n      success, \n      user {\n      \tid,phone,firstName,lastName,role\n      }\n    }\n  }\n`;\n\nexport const REGISTER_USER = gql`\n  mutation Register($phone: String!, $password: String!, $firstName: String, $lastName: String, $email: String) {\n    register(phone: $phone, password: $password, firstName: $firstName, lastName: $lastName, email: $email) {\n      id, phone, token\n    }\n  }\n`;\n\nexport const DELETE_USER = gql`\n\tmutation DeleteUser($id: Float!) {\n\t\tdelete(id: $id) {\n    \t\tsuccess\n  \t\t}\n\t}\n`;\n\n\n"]},"metadata":{},"sourceType":"module"}