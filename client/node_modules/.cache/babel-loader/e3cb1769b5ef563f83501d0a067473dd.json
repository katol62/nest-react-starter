{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/apple/Documents/work/git/nest-react/client/src/ui/components/Notivfication.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Alert } from \"react-bootstrap\";\nimport { NotificationService } from \"../../process/services/NotificationService\";\nexport const Notification = () => {\n  _s();\n\n  const initialMessage = {\n    variant: \"success\",\n    title: '',\n    message: ''\n  };\n  const autoCloseInterval = 4000;\n\n  const closeAlert = () => {\n    setCurrentMessage(initialMessage);\n    setShow(false);\n  };\n\n  const [show, setShow] = useState(false);\n  const [currentMessage, setCurrentMessage] = useState(initialMessage);\n  useEffect(() => {\n    const subscription = NotificationService.onNotification().subscribe({\n      next: notification => {\n        if (notification) {\n          setCurrentMessage({ ...notification\n          });\n          setShow(true);\n          setTimeout(() => closeAlert(), autoCloseInterval);\n        } else {\n          closeAlert();\n        }\n      },\n      error: err => {}\n    });\n    return subscription.unsubscribe;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Alert, {\n    className: \"notification\",\n    show: show,\n    variant: currentMessage.variant,\n    onClose: () => setShow(false),\n    dismissible: true,\n    children: [/*#__PURE__*/_jsxDEV(Alert.Heading, {\n      children: currentMessage.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: currentMessage.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Notification, \"vWjnM40dn3PMknGsoR/zzgF7fOs=\");\n\n_c = Notification;\n\nvar _c;\n\n$RefreshReg$(_c, \"Notification\");","map":{"version":3,"sources":["/Users/apple/Documents/work/git/nest-react/client/src/ui/components/Notivfication.tsx"],"names":["React","useEffect","useState","Alert","NotificationService","Notification","initialMessage","variant","title","message","autoCloseInterval","closeAlert","setCurrentMessage","setShow","show","currentMessage","subscription","onNotification","subscribe","next","notification","setTimeout","error","err","unsubscribe"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAAQC,KAAR,QAA4B,iBAA5B;AACA,SAAkBC,mBAAlB,QAAsD,4CAAtD;AAEA,OAAO,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAEjC,QAAMC,cAAmB,GAAG;AAC3BC,IAAAA,OAAO,EAAE,SADkB;AAE3BC,IAAAA,KAAK,EAAE,EAFoB;AAG3BC,IAAAA,OAAO,EAAE;AAHkB,GAA5B;AAKA,QAAMC,iBAAiB,GAAG,IAA1B;;AACA,QAAMC,UAAU,GAAG,MAAM;AACxBC,IAAAA,iBAAiB,CAACN,cAAD,CAAjB;AACAO,IAAAA,OAAO,CAAC,KAAD,CAAP;AACA,GAHD;;AAKA,QAAM,CAACC,IAAD,EAAOD,OAAP,IAAkBX,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM,CAACa,cAAD,EAAiBH,iBAAjB,IAAsCV,QAAQ,CAACI,cAAD,CAApD;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACf,UAAMe,YAAY,GAAGZ,mBAAmB,CAACa,cAApB,GAAqCC,SAArC,CACpB;AACCC,MAAAA,IAAI,EAAIC,YAAF,IAAyB;AAC9B,YAAIA,YAAJ,EAAkB;AACjBR,UAAAA,iBAAiB,CAAC,EAAC,GAAGQ;AAAJ,WAAD,CAAjB;AACAP,UAAAA,OAAO,CAAC,IAAD,CAAP;AACAQ,UAAAA,UAAU,CAAC,MAAMV,UAAU,EAAjB,EAAqBD,iBAArB,CAAV;AACA,SAJD,MAIO;AACNC,UAAAA,UAAU;AACV;AACD,OATF;AAUCW,MAAAA,KAAK,EAAEC,GAAG,IAAI,CACb;AAXF,KADoB,CAArB;AAeA,WAAOP,YAAY,CAACQ,WAApB;AACA,GAjBQ,EAiBN,EAjBM,CAAT;AAmBA,sBACC,QAAC,KAAD;AAAO,IAAA,SAAS,EAAC,cAAjB;AAAgC,IAAA,IAAI,EAAEV,IAAtC;AAA4C,IAAA,OAAO,EAAEC,cAAc,CAACR,OAApE;AAA6E,IAAA,OAAO,EAAE,MAAMM,OAAO,CAAC,KAAD,CAAnG;AAA4G,IAAA,WAAW,MAAvH;AAAA,4BACC,QAAC,KAAD,CAAO,OAAP;AAAA,gBAAgBE,cAAc,CAACP;AAA/B;AAAA;AAAA;AAAA;AAAA,YADD,eAEC;AAAA,gBACEO,cAAc,CAACN;AADjB;AAAA;AAAA;AAAA;AAAA,YAFD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AASA,CA5CM;;GAAMJ,Y;;KAAAA,Y","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport {Alert, Button} from \"react-bootstrap\";\nimport {IMessage, NotificationService, TVariant} from \"../../process/services/NotificationService\";\n\nexport const Notification = () => {\n\n\tconst initialMessage: any = {\n\t\tvariant: \"success\",\n\t\ttitle: '',\n\t\tmessage: ''\n\t}\n\tconst autoCloseInterval = 4000;\n\tconst closeAlert = () => {\n\t\tsetCurrentMessage(initialMessage);\n\t\tsetShow(false);\n\t}\n\n\tconst [show, setShow] = useState(false);\n\tconst [currentMessage, setCurrentMessage] = useState(initialMessage);\n\n\tuseEffect(() => {\n\t\tconst subscription = NotificationService.onNotification().subscribe(\n\t\t\t{\n\t\t\t\tnext: ( notification: any ) => {\n\t\t\t\t\tif (notification) {\n\t\t\t\t\t\tsetCurrentMessage({...notification});\n\t\t\t\t\t\tsetShow(true);\n\t\t\t\t\t\tsetTimeout(() => closeAlert(), autoCloseInterval);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcloseAlert();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\terror: err => {\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t\treturn subscription.unsubscribe;\n\t}, [])\n\n\treturn (\n\t\t<Alert className=\"notification\" show={show} variant={currentMessage.variant} onClose={() => setShow(false)} dismissible>\n\t\t\t<Alert.Heading>{currentMessage.title}</Alert.Heading>\n\t\t\t<p>\n\t\t\t\t{currentMessage.message}\n\t\t\t</p>\n\t\t</Alert>\n\t)\n\n}\n"]},"metadata":{},"sourceType":"module"}