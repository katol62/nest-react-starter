{"ast":null,"code":"import PersistentStorage from \"./Storage\";\nimport { Constants } from \"../helpers/Models\";\nimport { isExpired } from \"react-jwt\";\nimport { isLoggedInVar, loggedUserVar, tokenVar } from \"../apollo/GqlClient\";\nexport default class Auth {\n  constructor() {\n    this.storage = PersistentStorage.instance;\n  }\n\n  static get instance() {\n    debugger;\n\n    if (!this._instance) {\n      this._instance = new Auth();\n    }\n\n    debugger;\n    return this._instance;\n  }\n\n  get authorized() {\n    const token = tokenVar();\n\n    if (token && !isExpired(token)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  get initialAuthorized() {\n    const token = this.storage.getItem(Constants.TOKEN);\n\n    if (token && !isExpired(token)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  logOut() {\n    this.storage.clear();\n    loggedUserVar(null);\n    tokenVar(null);\n    isLoggedInVar(false);\n  }\n\n  get initialToken() {\n    const token = this.storage.getItem(Constants.TOKEN);\n    return token ? token : null;\n  }\n\n  get token() {\n    return tokenVar();\n  }\n\n  set token(token) {\n    if (token) {\n      this.storage.setItem(Constants.TOKEN, token);\n    } else {\n      this.storage.removeItem(Constants.TOKEN);\n    }\n\n    tokenVar(token);\n  }\n\n  get initialUser() {\n    const user = this.storage.getItem(Constants.USER);\n    return user ? user : null;\n  }\n\n  get user() {\n    return loggedUserVar();\n  }\n\n  set user(user) {\n    if (user) {\n      this.storage.setItem(Constants.USER, user);\n    } else {\n      this.storage.removeItem(Constants.USER);\n    }\n  }\n\n}\nAuth._instance = null;","map":{"version":3,"sources":["/Users/apple/Documents/work/git/nest-react/client/src/process/store/Auth.ts"],"names":["PersistentStorage","Constants","isExpired","isLoggedInVar","loggedUserVar","tokenVar","Auth","constructor","storage","instance","_instance","authorized","token","initialAuthorized","getItem","TOKEN","logOut","clear","initialToken","setItem","removeItem","initialUser","user","USER"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,WAA9B;AACA,SAAQC,SAAR,QAAwB,mBAAxB;AACA,SAAQC,SAAR,QAAwB,WAAxB;AACA,SAAQC,aAAR,EAAuBC,aAAvB,EAAsCC,QAAtC,QAAqD,qBAArD;AAEA,eAAe,MAAMC,IAAN,CAAW;AAMzBC,EAAAA,WAAW,GAAG;AAAA,SAJNC,OAIM,GAJIR,iBAAiB,CAACS,QAItB;AACb;;AAED,aAAkBA,QAAlB,GAAmC;AAClC;;AACA,QAAI,CAAC,KAAKC,SAAV,EAAqB;AACpB,WAAKA,SAAL,GAAiB,IAAIJ,IAAJ,EAAjB;AACA;;AACD;AACA,WAAO,KAAKI,SAAZ;AACA;;AAED,MAAWC,UAAX,GAAiC;AAChC,UAAMC,KAAK,GAAGP,QAAQ,EAAtB;;AACA,QAAIO,KAAK,IAAI,CAACV,SAAS,CAACU,KAAD,CAAvB,EAAgC;AAC/B,aAAO,IAAP;AACA;;AACD,WAAO,KAAP;AACA;;AAED,MAAWC,iBAAX,GAAwC;AACvC,UAAMD,KAAK,GAAG,KAAKJ,OAAL,CAAaM,OAAb,CAAqBb,SAAS,CAACc,KAA/B,CAAd;;AACA,QAAIH,KAAK,IAAI,CAACV,SAAS,CAACU,KAAD,CAAvB,EAAgC;AAC/B,aAAO,IAAP;AACA;;AACD,WAAO,KAAP;AACA;;AAEMI,EAAAA,MAAP,GAAsB;AACrB,SAAKR,OAAL,CAAaS,KAAb;AACAb,IAAAA,aAAa,CAAC,IAAD,CAAb;AACAC,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAF,IAAAA,aAAa,CAAC,KAAD,CAAb;AACA;;AAED,MAAWe,YAAX,GAAyC;AACxC,UAAMN,KAAK,GAAG,KAAKJ,OAAL,CAAaM,OAAb,CAAqBb,SAAS,CAACc,KAA/B,CAAd;AACA,WAAOH,KAAK,GAAGA,KAAH,GAAW,IAAvB;AACA;;AAED,MAAWA,KAAX,GAAkC;AACjC,WAAOP,QAAQ,EAAf;AACA;;AACD,MAAWO,KAAX,CAAiBA,KAAjB,EAAuC;AACtC,QAAIA,KAAJ,EAAW;AACV,WAAKJ,OAAL,CAAaW,OAAb,CAAqBlB,SAAS,CAACc,KAA/B,EAAsCH,KAAtC;AACA,KAFD,MAEO;AACN,WAAKJ,OAAL,CAAaY,UAAb,CAAwBnB,SAAS,CAACc,KAAlC;AACA;;AACDV,IAAAA,QAAQ,CAACO,KAAD,CAAR;AACA;;AAED,MAAWS,WAAX,GAA8B;AAC7B,UAAMC,IAAI,GAAG,KAAKd,OAAL,CAAaM,OAAb,CAAqBb,SAAS,CAACsB,IAA/B,CAAb;AACA,WAAOD,IAAI,GAAGA,IAAH,GAAU,IAArB;AACA;;AAED,MAAWA,IAAX,GAAuB;AACtB,WAAOlB,aAAa,EAApB;AACA;;AAED,MAAWkB,IAAX,CAAgBA,IAAhB,EAA2B;AAC1B,QAAIA,IAAJ,EAAU;AACT,WAAKd,OAAL,CAAaW,OAAb,CAAqBlB,SAAS,CAACsB,IAA/B,EAAqCD,IAArC;AACA,KAFD,MAEO;AACN,WAAKd,OAAL,CAAaY,UAAb,CAAwBnB,SAAS,CAACsB,IAAlC;AACA;AAED;;AA1EwB;AAALjB,I,CAIbI,S,GAAyB,I","sourcesContent":["import PersistentStorage from \"./Storage\";\nimport {Constants} from \"../helpers/Models\";\nimport {isExpired} from \"react-jwt\";\nimport {isLoggedInVar, loggedUserVar, tokenVar} from \"../apollo/GqlClient\";\n\nexport default class Auth {\n\n\tprivate storage = PersistentStorage.instance;\n\n\tstatic _instance: Auth | null = null;\n\n\tconstructor() {\n\t}\n\n\tpublic static get instance(): Auth {\n\t\tdebugger;\n\t\tif (!this._instance) {\n\t\t\tthis._instance = new Auth()\n\t\t}\n\t\tdebugger;\n\t\treturn this._instance\n\t}\n\n\tpublic get authorized(): boolean {\n\t\tconst token = tokenVar();\n\t\tif (token && !isExpired(token)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic get initialAuthorized(): boolean {\n\t\tconst token = this.storage.getItem(Constants.TOKEN);\n\t\tif (token && !isExpired(token)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic logOut(): void {\n\t\tthis.storage.clear();\n\t\tloggedUserVar(null);\n\t\ttokenVar(null);\n\t\tisLoggedInVar(false);\n\t}\n\n\tpublic get initialToken(): string | null {\n\t\tconst token = this.storage.getItem(Constants.TOKEN);\n\t\treturn token ? token : null\n\t}\n\n\tpublic get token(): string | null {\n\t\treturn tokenVar()\n\t}\n\tpublic set token(token: string | null) {\n\t\tif (token) {\n\t\t\tthis.storage.setItem(Constants.TOKEN, token as string);\n\t\t} else {\n\t\t\tthis.storage.removeItem(Constants.TOKEN);\n\t\t}\n\t\ttokenVar(token);\n\t}\n\n\tpublic get initialUser(): any {\n\t\tconst user = this.storage.getItem(Constants.USER);\n\t\treturn user ? user : null;\n\t}\n\n\tpublic get user(): any {\n\t\treturn loggedUserVar()\n\t}\n\n\tpublic set user(user: any) {\n\t\tif (user) {\n\t\t\tthis.storage.setItem(Constants.USER, user);\n\t\t} else {\n\t\t\tthis.storage.removeItem(Constants.USER);\n\t\t}\n\n\t}\n\n}\n"]},"metadata":{},"sourceType":"module"}