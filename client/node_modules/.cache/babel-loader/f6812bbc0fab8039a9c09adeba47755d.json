{"ast":null,"code":"import { Subject } from \"rxjs\";\nconst subject = new Subject();\nexport const NotificationService = {\n  sendNotification: notification => {\n    subject.next(notification);\n  },\n  clear: () => {\n    subject.next();\n  },\n  onNotification: () => {\n    return subject.asObservable();\n  }\n};","map":{"version":3,"sources":["/Users/apple/Documents/work/git/nest-react/client/src/process/services/NotificationService.ts"],"names":["Subject","subject","NotificationService","sendNotification","notification","next","clear","onNotification","asObservable"],"mappings":"AAAA,SAASA,OAAT,QAAwB,MAAxB;AAEA,MAAMC,OAAO,GAAG,IAAID,OAAJ,EAAhB;AAUA,OAAO,MAAME,mBAAmB,GAAG;AAElCC,EAAAA,gBAAgB,EAAGC,YAAD,IAA4B;AAC7CH,IAAAA,OAAO,CAACI,IAAR,CAAaD,YAAb;AACA,GAJiC;AAMlCE,EAAAA,KAAK,EAAE,MAAM;AACZL,IAAAA,OAAO,CAACI,IAAR;AACA,GARiC;AAUlCE,EAAAA,cAAc,EAAE,MAAM;AACrB,WAAON,OAAO,CAACO,YAAR,EAAP;AACA;AAZiC,CAA5B","sourcesContent":["import { Subject } from \"rxjs\";\n\nconst subject = new Subject<IMessage>();\n\nexport type TVariant = 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark';\n\nexport interface IMessage {\n\tvariant: TVariant,\n\ttitle: string;\n\tmessage: string\n}\n\nexport const NotificationService = {\n\n\tsendNotification: (notification: IMessage) => {\n\t\tsubject.next(notification);\n\t},\n\n\tclear: () => {\n\t\tsubject.next();\n\t},\n\n\tonNotification: () => {\n\t\treturn subject.asObservable();\n\t}\n\n}\n"]},"metadata":{},"sourceType":"module"}