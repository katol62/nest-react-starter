{"ast":null,"code":"import _objectSpread from\"/Users/apple/Documents/work/git/nest-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/apple/Documents/work/git/nest-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import React,{useEffect,useState}from\"react\";import{Alert}from\"react-bootstrap\";import{NotificationService}from\"../../process/services/NotificationService\";export var Notification=function Notification(){var initialMessage={variant:\"success\",title:'',message:''};var autoCloseInterval=4000;var closeAlert=function closeAlert(){setCurrentMessage(initialMessage);setShow(false);};var _useState=useState(false),_useState2=_slicedToArray(_useState,2),show=_useState2[0],setShow=_useState2[1];var _useState3=useState(initialMessage),_useState4=_slicedToArray(_useState3,2),currentMessage=_useState4[0],setCurrentMessage=_useState4[1];useEffect(function(){var subscription=NotificationService.onNotification().subscribe({next:function next(notification){if(notification){setCurrentMessage(_objectSpread({},notification));setShow(true);setTimeout(function(){return closeAlert();},autoCloseInterval);}else{closeAlert();}},error:function error(err){}});return subscription.unsubscribe;},[]);return/*#__PURE__*/_jsxs(Alert,{className:\"notification\",show:show,variant:currentMessage.variant,onClose:function onClose(){return setShow(false);},dismissible:true,children:[/*#__PURE__*/_jsx(Alert.Heading,{children:currentMessage.title}),/*#__PURE__*/_jsx(\"p\",{children:currentMessage.message})]});};","map":{"version":3,"sources":["/Users/apple/Documents/work/git/nest-react/client/src/ui/components/Notivfication.tsx"],"names":["React","useEffect","useState","Alert","NotificationService","Notification","initialMessage","variant","title","message","autoCloseInterval","closeAlert","setCurrentMessage","setShow","show","currentMessage","subscription","onNotification","subscribe","next","notification","setTimeout","error","err","unsubscribe"],"mappings":"uaAAA,MAAOA,CAAAA,KAAP,EAAeC,SAAf,CAA0BC,QAA1B,KAAyC,OAAzC,CACA,OAAQC,KAAR,KAA4B,iBAA5B,CACA,OAAkBC,mBAAlB,KAAsD,4CAAtD,CAEA,MAAO,IAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,CAEjC,GAAMC,CAAAA,cAAmB,CAAG,CAC3BC,OAAO,CAAE,SADkB,CAE3BC,KAAK,CAAE,EAFoB,CAG3BC,OAAO,CAAE,EAHkB,CAA5B,CAKA,GAAMC,CAAAA,iBAAiB,CAAG,IAA1B,CACA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CACxBC,iBAAiB,CAACN,cAAD,CAAjB,CACAO,OAAO,CAAC,KAAD,CAAP,CACA,CAHD,CARiC,cAaTX,QAAQ,CAAC,KAAD,CAbC,wCAa1BY,IAb0B,eAapBD,OAboB,8BAcWX,QAAQ,CAACI,cAAD,CAdnB,yCAc1BS,cAd0B,eAcVH,iBAdU,eAgBjCX,SAAS,CAAC,UAAM,CACf,GAAMe,CAAAA,YAAY,CAAGZ,mBAAmB,CAACa,cAApB,GAAqCC,SAArC,CACpB,CACCC,IAAI,CAAE,cAAEC,YAAF,CAAyB,CAC9B,GAAIA,YAAJ,CAAkB,CACjBR,iBAAiB,kBAAKQ,YAAL,EAAjB,CACAP,OAAO,CAAC,IAAD,CAAP,CACAQ,UAAU,CAAC,iBAAMV,CAAAA,UAAU,EAAhB,EAAD,CAAqBD,iBAArB,CAAV,CACA,CAJD,IAIO,CACNC,UAAU,GACV,CACD,CATF,CAUCW,KAAK,CAAE,eAAAC,GAAG,CAAI,CACb,CAXF,CADoB,CAArB,CAeA,MAAOP,CAAAA,YAAY,CAACQ,WAApB,CACA,CAjBQ,CAiBN,EAjBM,CAAT,CAmBA,mBACC,MAAC,KAAD,EAAO,SAAS,CAAC,cAAjB,CAAgC,IAAI,CAAEV,IAAtC,CAA4C,OAAO,CAAEC,cAAc,CAACR,OAApE,CAA6E,OAAO,CAAE,yBAAMM,CAAAA,OAAO,CAAC,KAAD,CAAb,EAAtF,CAA4G,WAAW,KAAvH,wBACC,KAAC,KAAD,CAAO,OAAP,WAAgBE,cAAc,CAACP,KAA/B,EADD,cAEC,mBACEO,cAAc,CAACN,OADjB,EAFD,GADD,CASA,CA5CM","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport {Alert, Button} from \"react-bootstrap\";\nimport {IMessage, NotificationService, TVariant} from \"../../process/services/NotificationService\";\n\nexport const Notification = () => {\n\n\tconst initialMessage: any = {\n\t\tvariant: \"success\",\n\t\ttitle: '',\n\t\tmessage: ''\n\t}\n\tconst autoCloseInterval = 4000;\n\tconst closeAlert = () => {\n\t\tsetCurrentMessage(initialMessage);\n\t\tsetShow(false);\n\t}\n\n\tconst [show, setShow] = useState(false);\n\tconst [currentMessage, setCurrentMessage] = useState(initialMessage);\n\n\tuseEffect(() => {\n\t\tconst subscription = NotificationService.onNotification().subscribe(\n\t\t\t{\n\t\t\t\tnext: ( notification: any ) => {\n\t\t\t\t\tif (notification) {\n\t\t\t\t\t\tsetCurrentMessage({...notification});\n\t\t\t\t\t\tsetShow(true);\n\t\t\t\t\t\tsetTimeout(() => closeAlert(), autoCloseInterval);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcloseAlert();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\terror: err => {\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t\treturn subscription.unsubscribe;\n\t}, [])\n\n\treturn (\n\t\t<Alert className=\"notification\" show={show} variant={currentMessage.variant} onClose={() => setShow(false)} dismissible>\n\t\t\t<Alert.Heading>{currentMessage.title}</Alert.Heading>\n\t\t\t<p>\n\t\t\t\t{currentMessage.message}\n\t\t\t</p>\n\t\t</Alert>\n\t)\n\n}\n"]},"metadata":{},"sourceType":"module"}