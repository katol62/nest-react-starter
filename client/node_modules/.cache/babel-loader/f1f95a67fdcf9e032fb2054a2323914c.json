{"ast":null,"code":"import PersistentStorage from \"../store/Storage\";\nimport { isLoggedInVar, loggedUserVar, tokenVar } from \"../apollo/GqlClient\";\nimport { Constants } from \"../helpers/Models\";\nimport { isExpired } from \"react-jwt\";\nconst storage = PersistentStorage.instance;\nexport const AuthService = {\n  logOut: () => {\n    storage.clear();\n    loggedUserVar(null);\n    tokenVar(null);\n    isLoggedInVar(false);\n  },\n  setToken: token => {\n    storage.setItem(Constants.TOKEN, token);\n    tokenVar(token);\n  },\n  setMe: me => {\n    storage.setItem(Constants.USER, me);\n    loggedUserVar(me);\n  },\n  setLoggedId: flag => {\n    isLoggedInVar(flag);\n  },\n  isAuthorized: () => {\n    const token = storage.getItem(Constants.TOKEN);\n\n    if (token && !isExpired(token)) {\n      const expired = isExpired(token);\n      debugger;\n      return true;\n    }\n\n    return false;\n  }\n};","map":{"version":3,"sources":["/Users/apple/Documents/work/git/nest-react/client/src/process/services/AuthService.ts"],"names":["PersistentStorage","isLoggedInVar","loggedUserVar","tokenVar","Constants","isExpired","storage","instance","AuthService","logOut","clear","setToken","token","setItem","TOKEN","setMe","me","USER","setLoggedId","flag","isAuthorized","getItem","expired"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,kBAA9B;AACA,SAAQC,aAAR,EAAuBC,aAAvB,EAAsCC,QAAtC,QAAqD,qBAArD;AACA,SAAQC,SAAR,QAAwB,mBAAxB;AACA,SAAQC,SAAR,QAAwB,WAAxB;AAEA,MAAMC,OAAO,GAAGN,iBAAiB,CAACO,QAAlC;AAEA,OAAO,MAAMC,WAAW,GAAG;AAC1BC,EAAAA,MAAM,EAAE,MAAM;AACbH,IAAAA,OAAO,CAACI,KAAR;AACAR,IAAAA,aAAa,CAAC,IAAD,CAAb;AACAC,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAF,IAAAA,aAAa,CAAC,KAAD,CAAb;AACA,GANyB;AAQ1BU,EAAAA,QAAQ,EAAGC,KAAD,IAAmB;AAC5BN,IAAAA,OAAO,CAACO,OAAR,CAAgBT,SAAS,CAACU,KAA1B,EAAiCF,KAAjC;AACAT,IAAAA,QAAQ,CAACS,KAAD,CAAR;AACA,GAXyB;AAa1BG,EAAAA,KAAK,EAAGC,EAAD,IAAa;AACnBV,IAAAA,OAAO,CAACO,OAAR,CAAgBT,SAAS,CAACa,IAA1B,EAAgCD,EAAhC;AACAd,IAAAA,aAAa,CAACc,EAAD,CAAb;AACA,GAhByB;AAkB1BE,EAAAA,WAAW,EAAGC,IAAD,IAAmB;AAC/BlB,IAAAA,aAAa,CAACkB,IAAD,CAAb;AACA,GApByB;AAsB1BC,EAAAA,YAAY,EAAE,MAAM;AACnB,UAAMR,KAAK,GAAGN,OAAO,CAACe,OAAR,CAAgBjB,SAAS,CAACU,KAA1B,CAAd;;AACA,QAAIF,KAAK,IAAI,CAACP,SAAS,CAACO,KAAD,CAAvB,EAAgC;AAC/B,YAAMU,OAAO,GAAGjB,SAAS,CAACO,KAAD,CAAzB;AACA;AACA,aAAO,IAAP;AACA;;AACD,WAAO,KAAP;AACA;AA9ByB,CAApB","sourcesContent":["import PersistentStorage from \"../store/Storage\";\nimport {isLoggedInVar, loggedUserVar, tokenVar} from \"../apollo/GqlClient\";\nimport {Constants} from \"../helpers/Models\";\nimport {isExpired} from \"react-jwt\";\n\nconst storage = PersistentStorage.instance;\n\nexport const AuthService = {\n\tlogOut: () => {\n\t\tstorage.clear();\n\t\tloggedUserVar(null);\n\t\ttokenVar(null);\n\t\tisLoggedInVar(false);\n\t},\n\n\tsetToken: (token: string) => {\n\t\tstorage.setItem(Constants.TOKEN, token as string);\n\t\ttokenVar(token);\n\t},\n\n\tsetMe: (me: any) => {\n\t\tstorage.setItem(Constants.USER, me);\n\t\tloggedUserVar(me);\n\t},\n\n\tsetLoggedId: (flag: boolean) => {\n\t\tisLoggedInVar(flag);\n\t},\n\n\tisAuthorized: () => {\n\t\tconst token = storage.getItem(Constants.TOKEN);\n\t\tif (token && !isExpired(token)) {\n\t\t\tconst expired = isExpired(token);\n\t\t\tdebugger;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n}\n"]},"metadata":{},"sourceType":"module"}