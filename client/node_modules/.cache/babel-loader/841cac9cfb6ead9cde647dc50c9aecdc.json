{"ast":null,"code":"import { ApolloClient, InMemoryCache, gql, makeVar, createHttpLink, ApolloLink, from } from \"@apollo/client\";\nimport PersistentStorage from '../store/Storage';\nimport { Constants } from \"../helpers/Models\";\nimport { onError } from \"@apollo/client/link/error\";\nimport { NotificationService } from \"../services/NotificationService\";\nimport { AuthService } from \"../services/AuthService\";\nimport { LoadingService } from \"../services/LoadingService\";\nimport Auth from \"../store/Auth\";\nconst storage = PersistentStorage.instance;\nconst auth = Auth.instance; // export const isLoggedInVar = makeVar<boolean>(!!(storage.getItem(Constants.TOKEN) && !isExpired(storage.getItem(Constants.TOKEN))));\n\ndebugger;\nexport const isLoggedInVar = makeVar(auth.initialAuthorized);\nexport const tokenVar = makeVar(auth.initialToken);\nexport const loggedUserVar = makeVar(auth.initialUser);\nconst typeDefs = gql`\n\t\tinput UserFilterDto {\n\t\t\tid: Float,\n\t\t\tfirstName: String,\n\t\t\tlastName: String,\n\t\t\temail: String,\n\t\t\tphone: String,\n\t\t\trole: String\n\t  \t}\n`;\nconst typePolicies = {\n  Query: {\n    fields: {\n      isLoggedIn: {\n        read() {\n          return isLoggedInVar();\n        }\n\n      },\n      me: {\n        read() {\n          return loggedUserVar();\n        }\n\n      },\n      token: {\n        read() {\n          return tokenVar();\n        }\n\n      }\n    }\n  }\n};\nconst cache = new InMemoryCache({\n  typePolicies\n});\nconst httpLink = createHttpLink({\n  uri: '/graphql'\n}); // const baseHeaders = {\n// \t'Content-Type': 'application/json',\n// \t'Access-Control-Allow-Origin': '*',\n// \t'Access-Control-Allow-Credentials': true,\n// }\n\nconst middleware = new ApolloLink((operation, forward) => {\n  LoadingService.showLoading(true);\n  console.log('Starting', operation, new Date());\n  return forward(operation);\n});\nconst afterware = new ApolloLink((operation, forward) => {\n  return forward(operation).map(response => {\n    LoadingService.showLoading(false);\n    console.log('Completed', operation, new Date());\n    return response;\n  });\n});\nconst authLink = new ApolloLink((operation, forward) => {\n  operation.setContext(({\n    headers\n  }) => ({\n    headers: {\n      authorization: `Bearer ${storage.getItem(Constants.TOKEN)}` || null,\n      ...headers\n    }\n  }));\n  return forward(operation);\n});\nconst errorLink = onError(({\n  graphQLErrors,\n  networkError\n}) => {\n  if (graphQLErrors) {\n    graphQLErrors.map(({\n      message,\n      locations,\n      path\n    }) => console.error(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`));\n    debugger;\n    const statusCode = graphQLErrors[0].extensions ? graphQLErrors[0].extensions.exception.response.statusCode : null;\n\n    if (statusCode && statusCode === 401) {\n      AuthService.logOut();\n    }\n\n    NotificationService.sendNotification({\n      variant: 'danger',\n      title: 'Error',\n      message: graphQLErrors[0].message\n    });\n  }\n\n  if (networkError) {\n    console.error(`[Network error]: ${networkError}`);\n    NotificationService.sendNotification({\n      variant: 'danger',\n      title: 'Error',\n      message: networkError.message\n    });\n  }\n});\nexport class Gql {\n  constructor() {\n    this.apollo = void 0;\n    this.apollo = this.initClient();\n  }\n\n  initClient() {\n    const client = new ApolloClient({\n      cache,\n      typeDefs,\n      link: from([authLink, errorLink, middleware, afterware, httpLink])\n    });\n    return client;\n  }\n\n}\nexport const client = new Gql().apollo;","map":{"version":3,"sources":["/Users/apple/Documents/work/git/nest-react/client/src/process/apollo/GqlClient.ts"],"names":["ApolloClient","InMemoryCache","gql","makeVar","createHttpLink","ApolloLink","from","PersistentStorage","Constants","onError","NotificationService","AuthService","LoadingService","Auth","storage","instance","auth","isLoggedInVar","initialAuthorized","tokenVar","initialToken","loggedUserVar","initialUser","typeDefs","typePolicies","Query","fields","isLoggedIn","read","me","token","cache","httpLink","uri","middleware","operation","forward","showLoading","console","log","Date","afterware","map","response","authLink","setContext","headers","authorization","getItem","TOKEN","errorLink","graphQLErrors","networkError","message","locations","path","error","statusCode","extensions","exception","logOut","sendNotification","variant","title","Gql","constructor","apollo","initClient","client","link"],"mappings":"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","sourcesContent":["import {ApolloClient, InMemoryCache, NormalizedCacheObject, gql, makeVar, createHttpLink, ApolloLink, from} from \"@apollo/client\";\nimport PersistentStorage from '../store/Storage'\nimport {Constants, IUser} from \"../helpers/Models\";\nimport {onError} from \"@apollo/client/link/error\";\nimport {NotificationService} from \"../services/NotificationService\";\nimport {AuthService} from \"../services/AuthService\";\nimport {LoadingService} from \"../services/LoadingService\";\nimport Auth from \"../store/Auth\";\n\nconst storage = PersistentStorage.instance;\nconst auth = Auth.instance;\n\n// export const isLoggedInVar = makeVar<boolean>(!!(storage.getItem(Constants.TOKEN) && !isExpired(storage.getItem(Constants.TOKEN))));\ndebugger;\nexport const isLoggedInVar = makeVar<boolean>(auth.initialAuthorized);\nexport const tokenVar = makeVar<string | null>(auth.initialToken);\nexport const loggedUserVar = makeVar<IUser | null>(auth.initialUser);\n\nconst typeDefs = gql`\n\t\tinput UserFilterDto {\n\t\t\tid: Float,\n\t\t\tfirstName: String,\n\t\t\tlastName: String,\n\t\t\temail: String,\n\t\t\tphone: String,\n\t\t\trole: String\n\t  \t}\n`;\n\nconst typePolicies = {\n\tQuery: {\n\t\tfields: {\n\t\t\tisLoggedIn: {\n\t\t\t\tread() {\n\t\t\t\t\treturn isLoggedInVar();\n\t\t\t\t}\n\t\t\t},\n\t\t\tme: {\n\t\t\t\tread() {\n\t\t\t\t\treturn loggedUserVar();\n\t\t\t\t}\n\t\t\t},\n\t\t\ttoken: {\n\t\t\t\tread() {\n\t\t\t\t\treturn tokenVar();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nconst cache = new InMemoryCache({typePolicies});\n\nconst httpLink = createHttpLink({\n\turi: '/graphql',\n});\n\n// const baseHeaders = {\n// \t'Content-Type': 'application/json',\n// \t'Access-Control-Allow-Origin': '*',\n// \t'Access-Control-Allow-Credentials': true,\n// }\n\nconst middleware = new ApolloLink((operation, forward) => {\n\tLoadingService.showLoading(true);\n\tconsole.log('Starting', operation, new Date());\n\n\treturn forward(operation);\n});\n\nconst afterware = new ApolloLink((operation, forward) => {\n\treturn forward(operation).map(response => {\n\t\tLoadingService.showLoading(false);\n\t\tconsole.log('Completed', operation, new Date());\n\n\t\treturn response;\n\t});\n});\n\nconst authLink = new ApolloLink((operation, forward) => {\n\toperation.setContext(({ headers }: any) => ({ headers: {\n\t\t\tauthorization: `Bearer ${storage.getItem(Constants.TOKEN)}` || null,\n\t\t\t...headers\n\t\t}}));\n\treturn forward(operation);\n});\n\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n\tif (graphQLErrors) {\n\t\tgraphQLErrors.map(({ message, locations, path }) =>\n\t\t\tconsole.error(\n\t\t\t\t`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n\t\t\t),\n\t\t);\n\t\tdebugger;\n\t\tconst statusCode = graphQLErrors[0].extensions ? graphQLErrors[0].extensions.exception.response.statusCode : null;\n\t\tif (statusCode && statusCode === 401) {\n\t\t\tAuthService.logOut();\n\t\t}\n\t\tNotificationService.sendNotification({\n\t\t\tvariant: 'danger',\n\t\t\ttitle: 'Error',\n\t\t\tmessage: graphQLErrors[0].message\n\t\t})\n\t}\n\tif (networkError) {\n\t\tconsole.error(`[Network error]: ${networkError}`);\n\t\tNotificationService.sendNotification({\n\t\t\tvariant: 'danger',\n\t\t\ttitle: 'Error',\n\t\t\tmessage: networkError.message\n\t\t})\n\t}\n});\n\nexport class Gql {\n\tpublic apollo: ApolloClient<NormalizedCacheObject>;\n\n\tconstructor() {\n\t\tthis.apollo = this.initClient();\n\t}\n\n\tprivate initClient(): ApolloClient<NormalizedCacheObject> {\n\t\tconst client = new ApolloClient({\n\t\t\tcache,\n\t\t\ttypeDefs,\n\t\t\tlink: from([authLink, errorLink, middleware, afterware, httpLink])\n\t\t});\n\t\treturn client;\n\t}\n}\n\nexport const client = new Gql().apollo;\n"]},"metadata":{},"sourceType":"module"}