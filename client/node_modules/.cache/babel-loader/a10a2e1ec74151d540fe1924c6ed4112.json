{"ast":null,"code":"import _classCallCheck from\"/Users/apple/Documents/work/git/nest-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/apple/Documents/work/git/nest-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _objectSpread from\"/Users/apple/Documents/work/git/nest-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _taggedTemplateLiteral from\"/Users/apple/Documents/work/git/nest-react/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";function _templateObject(){var data=_taggedTemplateLiteral([\"\\n\\t\\tinput UserFilterDto {\\n\\t\\t\\tid: Float,\\n\\t\\t\\tfirstName: String,\\n\\t\\t\\tlastName: String,\\n\\t\\t\\temail: String,\\n\\t\\t\\tphone: String,\\n\\t\\t\\trole: String\\n\\t  \\t}\\n\"]);_templateObject=function _templateObject(){return data;};return data;}import{ApolloClient,InMemoryCache,gql,makeVar,createHttpLink,ApolloLink,from}from\"@apollo/client\";import{onError}from\"@apollo/client/link/error\";import{NotificationService}from\"../services/NotificationService\";import{LoadingService}from\"../services/LoadingService\";import Auth from\"../store/Auth\";var auth=Auth.instance;export var isLoggedInVar=makeVar(auth.initialAuthorized);export var tokenVar=makeVar(auth.initialToken);export var loggedUserVar=makeVar(auth.initialUser);var typeDefs=gql(_templateObject());var typePolicies={Query:{fields:{isLoggedIn:{read:function read(){return isLoggedInVar();}},me:{read:function read(){return loggedUserVar();}},token:{read:function read(){return tokenVar();}}}}};var cache=new InMemoryCache({typePolicies:typePolicies});var httpLink=createHttpLink({uri:'/graphql'});// const baseHeaders = {\n// \t'Content-Type': 'application/json',\n// \t'Access-Control-Allow-Origin': '*',\n// \t'Access-Control-Allow-Credentials': true,\n// }\nvar middleware=new ApolloLink(function(operation,forward){LoadingService.showLoading(true);console.log('Starting',operation,new Date());return forward(operation);});var afterware=new ApolloLink(function(operation,forward){return forward(operation).map(function(response){LoadingService.showLoading(false);console.log('Completed',operation,new Date());return response;});});var authLink=new ApolloLink(function(operation,forward){operation.setContext(function(_ref){var headers=_ref.headers;return{headers:_objectSpread({authorization:\"Bearer \".concat(auth.token)||null},headers)};});return forward(operation);});var errorLink=onError(function(_ref2){var graphQLErrors=_ref2.graphQLErrors,networkError=_ref2.networkError;if(graphQLErrors){graphQLErrors.map(function(_ref3){var message=_ref3.message,locations=_ref3.locations,path=_ref3.path;return console.error(\"[GraphQL error]: Message: \".concat(message,\", Location: \").concat(locations,\", Path: \").concat(path));});debugger;var statusCode=graphQLErrors[0].extensions?graphQLErrors[0].extensions.exception.response.statusCode:null;if(statusCode&&statusCode===401){auth.logOut();}NotificationService.sendNotification({variant:'danger',title:'Error',message:graphQLErrors[0].message});}if(networkError){console.error(\"[Network error]: \".concat(networkError));NotificationService.sendNotification({variant:'danger',title:'Error',message:networkError.message});}});export var Gql=/*#__PURE__*/function(){function Gql(){_classCallCheck(this,Gql);this.apollo=void 0;this.apollo=this.initClient();}_createClass(Gql,[{key:\"initClient\",value:function initClient(){var client=new ApolloClient({cache:cache,typeDefs:typeDefs,link:from([authLink,errorLink,middleware,afterware,httpLink])});return client;}}]);return Gql;}();export var client=new Gql().apollo;","map":{"version":3,"sources":["/Users/apple/Documents/work/git/nest-react/client/src/process/apollo/GqlClient.ts"],"names":["ApolloClient","InMemoryCache","gql","makeVar","createHttpLink","ApolloLink","from","onError","NotificationService","LoadingService","Auth","auth","instance","isLoggedInVar","initialAuthorized","tokenVar","initialToken","loggedUserVar","initialUser","typeDefs","typePolicies","Query","fields","isLoggedIn","read","me","token","cache","httpLink","uri","middleware","operation","forward","showLoading","console","log","Date","afterware","map","response","authLink","setContext","headers","authorization","errorLink","graphQLErrors","networkError","message","locations","path","error","statusCode","extensions","exception","logOut","sendNotification","variant","title","Gql","apollo","initClient","client","link"],"mappings":"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","sourcesContent":["import {ApolloClient, InMemoryCache, NormalizedCacheObject, gql, makeVar, createHttpLink, ApolloLink, from} from \"@apollo/client\";\nimport PersistentStorage from '../store/Storage'\nimport {Constants, IUser} from \"../helpers/Models\";\nimport {onError} from \"@apollo/client/link/error\";\nimport {NotificationService} from \"../services/NotificationService\";\nimport {LoadingService} from \"../services/LoadingService\";\nimport Auth from \"../store/Auth\";\n\nconst auth = Auth.instance;\n\nexport const isLoggedInVar = makeVar<boolean>(auth.initialAuthorized);\nexport const tokenVar = makeVar<string | null>(auth.initialToken);\nexport const loggedUserVar = makeVar<IUser | null>(auth.initialUser);\n\nconst typeDefs = gql`\n\t\tinput UserFilterDto {\n\t\t\tid: Float,\n\t\t\tfirstName: String,\n\t\t\tlastName: String,\n\t\t\temail: String,\n\t\t\tphone: String,\n\t\t\trole: String\n\t  \t}\n`;\n\nconst typePolicies = {\n\tQuery: {\n\t\tfields: {\n\t\t\tisLoggedIn: {\n\t\t\t\tread() {\n\t\t\t\t\treturn isLoggedInVar();\n\t\t\t\t}\n\t\t\t},\n\t\t\tme: {\n\t\t\t\tread() {\n\t\t\t\t\treturn loggedUserVar();\n\t\t\t\t}\n\t\t\t},\n\t\t\ttoken: {\n\t\t\t\tread() {\n\t\t\t\t\treturn tokenVar();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nconst cache = new InMemoryCache({typePolicies});\n\nconst httpLink = createHttpLink({\n\turi: '/graphql',\n});\n\n// const baseHeaders = {\n// \t'Content-Type': 'application/json',\n// \t'Access-Control-Allow-Origin': '*',\n// \t'Access-Control-Allow-Credentials': true,\n// }\n\nconst middleware = new ApolloLink((operation, forward) => {\n\tLoadingService.showLoading(true);\n\tconsole.log('Starting', operation, new Date());\n\n\treturn forward(operation);\n});\n\nconst afterware = new ApolloLink((operation, forward) => {\n\treturn forward(operation).map(response => {\n\t\tLoadingService.showLoading(false);\n\t\tconsole.log('Completed', operation, new Date());\n\n\t\treturn response;\n\t});\n});\n\nconst authLink = new ApolloLink((operation, forward) => {\n\toperation.setContext(({ headers }: any) => ({ headers: {\n\t\t\tauthorization: `Bearer ${auth.token}` || null,\n\t\t\t...headers\n\t\t}}));\n\treturn forward(operation);\n});\n\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n\tif (graphQLErrors) {\n\t\tgraphQLErrors.map(({ message, locations, path }) =>\n\t\t\tconsole.error(\n\t\t\t\t`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n\t\t\t),\n\t\t);\n\t\tdebugger;\n\t\tconst statusCode = graphQLErrors[0].extensions ? graphQLErrors[0].extensions.exception.response.statusCode : null;\n\t\tif (statusCode && statusCode === 401) {\n\t\t\tauth.logOut();\n\t\t}\n\t\tNotificationService.sendNotification({\n\t\t\tvariant: 'danger',\n\t\t\ttitle: 'Error',\n\t\t\tmessage: graphQLErrors[0].message\n\t\t})\n\t}\n\tif (networkError) {\n\t\tconsole.error(`[Network error]: ${networkError}`);\n\t\tNotificationService.sendNotification({\n\t\t\tvariant: 'danger',\n\t\t\ttitle: 'Error',\n\t\t\tmessage: networkError.message\n\t\t})\n\t}\n});\n\nexport class Gql {\n\tpublic apollo: ApolloClient<NormalizedCacheObject>;\n\n\tconstructor() {\n\t\tthis.apollo = this.initClient();\n\t}\n\n\tprivate initClient(): ApolloClient<NormalizedCacheObject> {\n\t\tconst client = new ApolloClient({\n\t\t\tcache,\n\t\t\ttypeDefs,\n\t\t\tlink: from([authLink, errorLink, middleware, afterware, httpLink])\n\t\t});\n\t\treturn client;\n\t}\n}\n\nexport const client = new Gql().apollo;\n"]},"metadata":{},"sourceType":"module"}