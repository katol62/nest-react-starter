{"ast":null,"code":"import { useState, useEffect } from 'react';\n\nfunction decodeToken(token) {\n  try {\n    if (token.split(\".\").length !== 3 || typeof token !== \"string\") {\n      return null;\n    } else {\n      var payload = token.split(\".\")[1];\n      var decoded = JSON.parse(atob(payload));\n      return decoded;\n    }\n  } catch (error) {\n    return null;\n  }\n}\n\nfunction isTokenExpired(token) {\n  var decodedToken = decodeToken(token);\n  var result = true;\n\n  if (decodedToken && decodedToken.exp) {\n    var expirationDate = new Date(0);\n    expirationDate.setUTCSeconds(decodedToken.exp);\n    result = expirationDate.valueOf() < new Date().valueOf();\n  } else {\n    result = true;\n  }\n\n  return result;\n}\n\nfunction useJwt(token) {\n  var _useState = useState(false),\n      isExpired = _useState[0],\n      setIsExpired = _useState[1];\n\n  var _useState2 = useState(null),\n      decodedToken = _useState2[0],\n      setDecodedToken = _useState2[1];\n\n  useEffect(function () {\n    setDecodedToken(decodeToken(token));\n    setIsExpired(isTokenExpired(token));\n  }, [token]);\n  return {\n    isExpired: isExpired,\n    decodedToken: decodedToken\n  };\n}\n\nexport { decodeToken, isTokenExpired as isExpired, useJwt };","map":{"version":3,"sources":["../src/jwt/index.ts","../src/hooks/index.tsx"],"names":["decodeToken","token","payload","decoded","JSON","atob","isTokenExpired","decodedToken","result","expirationDate","useJwt","isExpired","setIsExpired","useState","setDecodedToken","useEffect"],"mappings":";;SAAgBA,W,CAAYC,K,EAAAA;AAC1B,MAAI;AAGF,QAAIA,KAAK,CAALA,KAAAA,CAAAA,GAAAA,EAAAA,MAAAA,KAAAA,CAAAA,IAAiC,OAAA,KAAA,KAArC,QAAA,EAAgE;AAC9D,aAAA,IAAA;AADF,KAAA,MAEO;AAGL,UAAMC,OAAO,GAAWD,KAAK,CAALA,KAAAA,CAAAA,GAAAA,EAAxB,CAAwBA,CAAxB;AAEA,UAAME,OAAO,GAAGC,IAAI,CAAJA,KAAAA,CAAWC,IAAI,CAA/B,OAA+B,CAAfD,CAAhB;AACA,aAAA,OAAA;AACD;AAZH,GAAA,CAaE,OAAA,KAAA,EAAc;AAEd,WAAA,IAAA;AACD;AACF;;SAEeE,c,CAAeL,K,EAAAA;AAC7B,MAAMM,YAAY,GAAQP,WAAW,CAArC,KAAqC,CAArC;AACA,MAAIQ,MAAM,GAAV,IAAA;;AAEA,MAAID,YAAY,IAAIA,YAAY,CAAhC,GAAA,EAAsC;AACpC,QAAME,cAAc,GAAS,IAAA,IAAA,CAA7B,CAA6B,CAA7B;AACAA,IAAAA,cAAc,CAAdA,aAAAA,CAA6BF,YAAY,CAAzCE,GAAAA;AAEAD,IAAAA,MAAM,GAAGC,cAAc,CAAdA,OAAAA,KAA2B,IAAA,IAAA,GAApCD,OAAoC,EAApCA;AAJF,GAAA,MAKO;AACLA,IAAAA,MAAM,GAANA,IAAAA;AACD;;AAED,SAAA,MAAA;AACD;;SC/BeE,M,CAAOT,K,EAAAA;kBACaY,QAAQ,CAAA,KAAA,C;MAAnCF,SAAAA,GAAAA,SAAAA,CAAAA,CAAAA,C;MAAWC,YAAAA,GAAAA,SAAAA,CAAAA,CAAAA,C;;mBACsBC,QAAQ,CAAA,IAAA,C;MAAzCN,YAAAA,GAAAA,UAAAA,CAAAA,CAAAA,C;MAAcO,eAAAA,GAAAA,UAAAA,CAAAA,CAAAA,C;;AAErBC,EAAAA,SAAS,CAAC,YAAA;AACRD,IAAAA,eAAe,CAACd,WAAW,CAA3Bc,KAA2B,CAAZ,CAAfA;AACAF,IAAAA,YAAY,CAACN,cAAc,CAA3BM,KAA2B,CAAf,CAAZA;AAFO,GAAA,EAGN,CAHHG,KAGG,CAHM,CAATA;AAKA,SAAO;AAAEJ,IAAAA,SAAS,EAAX,SAAA;AAAaJ,IAAAA,YAAY,EAAZA;AAAb,GAAP;AACD","sourcesContent":["export function decodeToken(token: string) {\n  try {\n    // if the token has more or less than 3 parts or is not a string\n    // then is not a valid token\n    if (token.split(\".\").length !== 3 || typeof token !== \"string\") {\n      return null;\n    } else {\n      // payload ( index 1 ) has the data stored and\n      // data about the expiration time\n      const payload: string = token.split(\".\")[1];\n      // decode and parse to json\n      const decoded = JSON.parse(atob(payload));\n      return decoded;\n    }\n  } catch (error) {\n    // Return null if something goes wrong\n    return null;\n  }\n}\n\nexport function isTokenExpired(token: string) {\n  const decodedToken: any = decodeToken(token);\n  let result: boolean = true;\n\n  if (decodedToken && decodedToken.exp) {\n    const expirationDate: Date = new Date(0);\n    expirationDate.setUTCSeconds(decodedToken.exp); // sets the expiration seconds\n    // compare the expiration time and the current time\n    result = expirationDate.valueOf() < new Date().valueOf();\n  } else {\n    result = true;\n  }\n\n  return result;\n}\n","import { useState, useEffect } from \"react\";\nimport { decodeToken, isTokenExpired } from \"../jwt\";\n\nexport function useJwt(token: string) {\n  const [isExpired, setIsExpired] = useState(false);\n  const [decodedToken, setDecodedToken] = useState<any>(null);\n\n  useEffect(() => {\n    setDecodedToken(decodeToken(token));\n    setIsExpired(isTokenExpired(token));\n  }, [token]);\n\n  return { isExpired, decodedToken };\n}\n"]},"metadata":{},"sourceType":"module"}