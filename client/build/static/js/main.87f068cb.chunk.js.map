{"version":3,"sources":["process/apollo/GqlData.ts","process/helpers/Models.ts","ui/components/LoginForm.tsx","ui/components/RegisterForm.tsx","process/store/Storage.ts","process/services/NotificationService.ts","process/services/LoadingService.ts","process/apollo/GqlClient.ts","ui/pages/Login.tsx","process/store/Auth.ts","ui/components/EditForm.tsx","ui/pages/User.tsx","process/helpers/Routes.ts","ui/pages/Home.tsx","ui/pages/Details.tsx","ui/pages/Users.tsx","ui/components/Topbar.tsx","ui/pages/NotFound.tsx","ui/components/SideBar.tsx","ui/containers/MainView.tsx","ui/containers/Root.tsx","ui/components/Notivfication.tsx","ui/components/Loading.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Constants","IS_LOGGED_IN","gql","LOGIN_USER","USER_ME","GET_USERS","GET_USER","CREATE_USER","UPDATE_USER","REGISTER_USER","DELETE_USER","LoginForm","login","useForm","register","handleSubmit","setValue","formState","useEffect","name","handleChange","e","target","value","Form","onSubmit","data","variables","phone","password","Group","controlId","Label","Control","type","placeholder","onChange","ref","Text","className","Button","variant","disabled","isSubmitting","RegisterForm","reg","required","PersistentStorage","t","storage","this","sessionStorage","localStorage","key","setItem","JSON","stringify","getItem","parse","removeItem","clear","_instance","subject","Subject","NotificationService","notification","next","asObservable","LoadingService","flag","console","log","EFormState","auth","Auth","instance","isLoggedInVar","makeVar","initialAuthorized","tokenVar","initialToken","loggedUserVar","initialUser","typeDefs","typePolicies","Query","fields","isLoggedIn","read","me","token","cache","InMemoryCache","httpLink","createHttpLink","uri","middleware","ApolloLink","operation","forward","Date","afterware","map","response","authLink","setContext","headers","authorization","errorLink","onError","graphQLErrors","networkError","message","locations","path","error","statusCode","extensions","exception","logOut","title","client","apollo","initClient","ApolloClient","link","from","isExpired","TOKEN","user","USER","LoginPage","useState","setFormState","useLazyQuery","fetchPolicy","notifyOnNetworkStatusChange","onCompleted","getCurrentUser","queryLoading","loading","useMutation","errorPolicy","regLoading","Container","fluid","Row","Col","sm","span","md","lg","xl","xs","Card","Header","Body","onClick","EditForm","update","create","id","useParams","userId","setUserId","getUser","filter","Number","Object","entries","forEach","entry","event","preventDefault","UserPage","createLoading","success","updateLoading","routes","home","icon","HouseDoor","details","ListTask","users","People","userNew","Person","userEdit","pages","route","exact","component","history","useHistory","open","setOpen","setUser","useQuery","refetch","delete","removeUser","handleClose","handleShow","push","length","Table","striped","bordered","hover","size","responsive","color","deleteUser","editUser","dataTable","Modal","show","onHide","closeButton","Title","Footer","TopBar","currentUser","setCurrentUser","values","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","style","fontSize","NotFoundPage","SideBar","notify","select","location","useLocation","findRoute","find","menuItems","onSelect","onToggle","Nav","defaultSelected","pathname","i","Icon","eventKey","MainView","dynamic","useRouteMatch","expanded","setExpanded","setRoute","currentPath","currentRoute","index","Root","Notification","initialMessage","closeAlert","setCurrentMessage","setShow","currentMessage","subscribe","setTimeout","err","unsubscribe","Alert","onClose","dismissible","Heading","Loading","display","Spinner","animation","role","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.87f068cb.chunk.js","sourcesContent":["import {gql} from \"@apollo/client/core\";\n\nexport const IS_LOGGED_IN = gql`\n  query IsUserLoggedIn {\n    isLoggedIn @client\n  }\n`;\n\nexport const LOGIN_USER = gql`\n  mutation Login($phone: String!, $password: String!) {\n    login(phone: $phone, password: $password) {\n      token\n    }\n  }\n`;\n\nexport const USER_ME = gql`\n  query Me {\n\tme {\n    \tid,phone,firstName,lastName,role\n  \t}\n  }\n`;\n\nexport const LOGOUT_USER = gql`\n\tmutation Logout {\n\t\tisLoggedIn @client\n\t}\n`;\n\nexport const GET_USERS = gql`\n\tquery Users($filter: UserFilterDto) {\n\t\tusers(filter: $filter) {\n    \t\tid,phone,firstName,lastName,role\n  \t\t}\n\t}\n`;\n\nexport const GET_USER = gql`\n  query GetUser($filter: UserFilterDto) {\n\tuser(filter: $filter) {\n    \tid,phone,firstName,lastName,email,role\n  \t}\n  }\n`;\n\nexport const CREATE_USER = gql`\n  mutation CreateUser($phone: String!, $password: String!, $firstName: String, $lastName: String, $email: String) {\n    create(phone: $phone, password: $password, firstName: $firstName, lastName: $lastName, email: $email) {\n      id, phone, role\n    }\n  }\n`;\n\nexport const UPDATE_USER = gql`\n  mutation UpdateUser($id: Float!, $phone: String, $password: String, $firstName: String, $lastName: String, $email: String) {\n    update(id: $id, phone: $phone, password: $password, firstName: $firstName, lastName: $lastName, email: $email) {\n      success, \n      user {\n      \tid,phone,firstName,lastName,role\n      }\n    }\n  }\n`;\n\nexport const REGISTER_USER = gql`\n  mutation Register($phone: String!, $password: String!, $firstName: String, $lastName: String, $email: String) {\n    register(phone: $phone, password: $password, firstName: $firstName, lastName: $lastName, email: $email) {\n      id, phone, token\n    }\n  }\n`;\n\nexport const DELETE_USER = gql`\n\tmutation DeleteUser($id: Float!) {\n\t\tdelete(id: $id) {\n    \t\tsuccess\n  \t\t}\n\t}\n`;\n\n\n","export enum Constants {\n\tSTORE = 'STORE',\n\tTOKEN = 'token',\n\tUSER = 'user'\n}\n\nexport interface IUser {\n\tid?: number;\n\tfirstName?: string | null | undefined;\n\tlastName?: string | null | undefined;\n\tphone?: string | undefined;\n\tdeviceId?: string | undefined;\n\temail?: string | null | undefined;\n\tpassword?: string | null | undefined;\n\tnewPassword?: string | null | undefined;\n\tdob?: string | null | undefined;\n\trole?: 'super' | 'admin' | 'user';\n}\n\n","import {useForm} from \"react-hook-form\";\nimport React, {useEffect} from \"react\";\nimport {Button, Form} from \"react-bootstrap\";\n\nexport interface LoginFormVariables {\n\tphone: string;\n\tpassword: string;\n}\n\nexport interface ILoginProps {\n\tlogin: (a: {variables: {phone: string, password: string}}) => void\n}\n\nexport const LoginForm = ({ login }: ILoginProps) => {\n\n\tconst { register, handleSubmit, setValue, formState } = useForm();\n\n\tuseEffect(() => {\n\t\tregister({ name: \"phone\" });\n\t\tregister({ name: \"password\" });\n\t}, [register]);\n\n\tconst onSubmit = (data: LoginFormVariables) => {\n\t\tlogin( {variables: {phone: data.phone, password: data.password} })\n\t};\n\n\tconst handleChange = (e: any) => {\n\t\tsetValue(e.target.name, e.target.value);\n\t};\n\n\treturn (\n\t\t<Form onSubmit={handleSubmit(onSubmit)}>\n\t\t\t<Form.Group controlId=\"phone\">\n\t\t\t\t<Form.Label>Phone</Form.Label>\n\t\t\t\t<Form.Control type=\"numeric\" placeholder=\"Phone\" name=\"phone\" onChange={handleChange} ref={register} />\n\t\t\t\t<Form.Text className=\"text-muted\">\n\t\t\t\t\tWe'll never share your email with anyone else.\n\t\t\t\t</Form.Text>\n\t\t\t</Form.Group>\n\t\t\t<Form.Group controlId=\"password\">\n\t\t\t\t<Form.Label>Password</Form.Label>\n\t\t\t\t<Form.Control type=\"password\" placeholder=\"Password\" name=\"password\" onChange={handleChange} ref={register} />\n\t\t\t</Form.Group>\n\t\t\t<Button variant=\"primary\" type=\"submit\" disabled={formState.isSubmitting}>\n\t\t\t\tLogin\n\t\t\t</Button>\n\t\t</Form>\n\t)\n\n}\n","import {useForm} from \"react-hook-form\";\nimport {Button, Form} from \"react-bootstrap\";\nimport React, {useEffect} from \"react\";\nimport {LoginFormVariables} from \"./LoginForm\";\n\nexport interface RegisterFormVariables {\n\tid?: number;\n\tphone: string;\n\tpassword: string;\n\tfirstName?: string;\n\tlastName?: string;\n\temail?: string;\n\trole?: string;\n}\n\nexport interface IRegisterProps {\n\treg: (a: {\n\t\tvariables: {\n\t\t\tphone: string,\n\t\t\tpassword: string,\n\t\t\tfirstName?: string,\n\t\t\tlastName?: string,\n\t\t\temail?: string,\n\t\t\trole?: string\n\t\t}\n\t}) => void\n}\n\nexport const RegisterForm = ({ reg }: IRegisterProps) => {\n\tconst { register, handleSubmit, setValue, formState } = useForm();\n\n\tuseEffect(() => {\n\t\tregister({ name: \"phone\" });\n\t\tregister({ name: \"password\" });\n\t\tregister({ name: \"firstName\" });\n\t\tregister({ name: \"lastName\" });\n\t\tregister({ name: \"email\" });\n\t}, [register]);\n\n\tconst onSubmit = (data: RegisterFormVariables) => {\n\t\treg( {variables: {...data} })\n\t};\n\n\tconst handleChange = (e: any) => {\n\t\tsetValue(e.target.name, e.target.value);\n\t};\n\n\treturn (\n\t\t<Form onSubmit={handleSubmit(onSubmit)}>\n\t\t\t<Form.Group controlId=\"phone\">\n\t\t\t\t<Form.Label>Phone</Form.Label>\n\t\t\t\t<Form.Control\n\t\t\t\t\ttype=\"numeric\"\n\t\t\t\t\tplaceholder=\"Phone\"\n\t\t\t\t\tname=\"phone\"\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\trequired\n\t\t\t\t\tref={register} />\n\t\t\t\t<Form.Text className=\"text-muted\">\n\t\t\t\t\tWe'll never share your email with anyone else.\n\t\t\t\t</Form.Text>\n\t\t\t</Form.Group>\n\t\t\t<Form.Group controlId=\"password\">\n\t\t\t\t<Form.Label>Password</Form.Label>\n\t\t\t\t<Form.Control\n\t\t\t\t\ttype=\"password\"\n\t\t\t\t\tplaceholder=\"Password\"\n\t\t\t\t\tname=\"password\"\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\trequired\n\t\t\t\t\tref={register} />\n\t\t\t</Form.Group>\n\t\t\t<Form.Group controlId=\"firstName\">\n\t\t\t\t<Form.Label>First Name</Form.Label>\n\t\t\t\t<Form.Control type=\"text\" placeholder=\"First Name\" name=\"firstName\" onChange={handleChange} ref={register} />\n\t\t\t</Form.Group>\n\t\t\t<Form.Group controlId=\"lastName\">\n\t\t\t\t<Form.Label>Last Name</Form.Label>\n\t\t\t\t<Form.Control type=\"text\" placeholder=\"Last Name\" name=\"lastName\" onChange={handleChange} ref={register} />\n\t\t\t</Form.Group>\n\t\t\t<Form.Group controlId=\"email\">\n\t\t\t\t<Form.Label>Email</Form.Label>\n\t\t\t\t<Form.Control type=\"email\" placeholder=\"Email\" name=\"email\" onChange={handleChange} ref={register} />\n\t\t\t</Form.Group>\n\t\t\t<Button variant=\"primary\" type=\"submit\" disabled={formState.isSubmitting}>\n\t\t\t\tRegister\n\t\t\t</Button>\n\t\t</Form>\n\t)\n\n}\n\n","export type STORAGE_TYPE = 'session' | 'local'\n\nexport default class PersistentStorage {\n\n\tprivate readonly type: STORAGE_TYPE;\n\tprivate storage: any;\n\tstatic _instance: PersistentStorage | null = null;\n\n\tconstructor(t?: STORAGE_TYPE) {\n\t\tthis.type = t ? t : 'session';\n\t\tthis.storage = this.type === 'session' ? sessionStorage : localStorage;\n\t}\n\n\tpublic static get instance(): PersistentStorage {\n\t\tif (!this._instance) {\n\t\t\tthis._instance = new PersistentStorage()\n\t\t}\n\t\treturn this._instance\n\t}\n\n\tpublic setItem(key: string, data: any): void {\n\t\tthis.storage.setItem(key, JSON.stringify(data));\n\t}\n\n\tpublic getItem(key: string): any {\n\t\tconst data = this.storage.getItem(key);\n\t\treturn data ? JSON.parse(data) : null\n\t}\n\n\tpublic removeItem(key: string): void {\n\t\tthis.storage.removeItem(key);\n\t}\n\n\tclear(): void {\n\t\tthis.storage.clear();\n\t}\n\n}\n","import { Subject } from \"rxjs\";\n\nconst subject = new Subject<IMessage>();\n\nexport type TVariant = 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark';\n\nexport interface IMessage {\n\tvariant: TVariant,\n\ttitle: string;\n\tmessage: string\n}\n\nexport const NotificationService = {\n\n\tsendNotification: (notification: IMessage) => {\n\t\tsubject.next(notification);\n\t},\n\n\tclear: () => {\n\t\tsubject.next();\n\t},\n\n\tonNotification: () => {\n\t\treturn subject.asObservable();\n\t}\n\n}\n","import {Subject} from \"rxjs\";\n\nconst subject = new Subject<boolean>();\n\nexport const LoadingService = {\n\n\tshowLoading: (flag: boolean) => {\n\t\tconsole.log(`loading: ${flag}`);\n\t\tsubject.next(flag)\n\t},\n\n\tonLoading: () => {\n\t\treturn subject.asObservable();\n\t}\n}\n","import {ApolloClient, InMemoryCache, NormalizedCacheObject, gql, makeVar, createHttpLink, ApolloLink, from} from \"@apollo/client\";\nimport PersistentStorage from '../store/Storage'\nimport {Constants, IUser} from \"../helpers/Models\";\nimport {onError} from \"@apollo/client/link/error\";\nimport {NotificationService} from \"../services/NotificationService\";\nimport {LoadingService} from \"../services/LoadingService\";\nimport Auth from \"../store/Auth\";\n\nconst auth = Auth.instance;\n\nexport const isLoggedInVar = makeVar<boolean>(auth.initialAuthorized);\nexport const tokenVar = makeVar<string | null>(auth.initialToken);\nexport const loggedUserVar = makeVar<IUser | null>(auth.initialUser);\n\nconst typeDefs = gql`\n\t\tinput UserFilterDto {\n\t\t\tid: Float,\n\t\t\tfirstName: String,\n\t\t\tlastName: String,\n\t\t\temail: String,\n\t\t\tphone: String,\n\t\t\trole: String\n\t  \t}\n`;\n\nconst typePolicies = {\n\tQuery: {\n\t\tfields: {\n\t\t\tisLoggedIn: {\n\t\t\t\tread() {\n\t\t\t\t\treturn isLoggedInVar();\n\t\t\t\t}\n\t\t\t},\n\t\t\tme: {\n\t\t\t\tread() {\n\t\t\t\t\treturn loggedUserVar();\n\t\t\t\t}\n\t\t\t},\n\t\t\ttoken: {\n\t\t\t\tread() {\n\t\t\t\t\treturn tokenVar();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nconst cache = new InMemoryCache({typePolicies});\n\nconst httpLink = createHttpLink({\n\turi: '/graphql',\n});\n\n// const baseHeaders = {\n// \t'Content-Type': 'application/json',\n// \t'Access-Control-Allow-Origin': '*',\n// \t'Access-Control-Allow-Credentials': true,\n// }\n\nconst middleware = new ApolloLink((operation, forward) => {\n\tLoadingService.showLoading(true);\n\tconsole.log('Starting', operation, new Date());\n\n\treturn forward(operation);\n});\n\nconst afterware = new ApolloLink((operation, forward) => {\n\treturn forward(operation).map(response => {\n\t\tLoadingService.showLoading(false);\n\t\tconsole.log('Completed', operation, new Date());\n\n\t\treturn response;\n\t});\n});\n\nconst authLink = new ApolloLink((operation, forward) => {\n\toperation.setContext(({ headers }: any) => ({ headers: {\n\t\t\tauthorization: `Bearer ${auth.token}` || null,\n\t\t\t...headers\n\t\t}}));\n\treturn forward(operation);\n});\n\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n\tif (graphQLErrors) {\n\t\tgraphQLErrors.map(({ message, locations, path }) =>\n\t\t\tconsole.error(\n\t\t\t\t`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n\t\t\t),\n\t\t);\n\t\tdebugger;\n\t\tconst statusCode = graphQLErrors[0].extensions ? graphQLErrors[0].extensions.exception.response.statusCode : null;\n\t\tif (statusCode && statusCode === 401) {\n\t\t\tauth.logOut();\n\t\t}\n\t\tNotificationService.sendNotification({\n\t\t\tvariant: 'danger',\n\t\t\ttitle: 'Error',\n\t\t\tmessage: graphQLErrors[0].message\n\t\t})\n\t}\n\tif (networkError) {\n\t\tconsole.error(`[Network error]: ${networkError}`);\n\t\tNotificationService.sendNotification({\n\t\t\tvariant: 'danger',\n\t\t\ttitle: 'Error',\n\t\t\tmessage: networkError.message\n\t\t})\n\t}\n});\n\nexport class Gql {\n\tpublic apollo: ApolloClient<NormalizedCacheObject>;\n\n\tconstructor() {\n\t\tthis.apollo = this.initClient();\n\t}\n\n\tprivate initClient(): ApolloClient<NormalizedCacheObject> {\n\t\tconst client = new ApolloClient({\n\t\t\tcache,\n\t\t\ttypeDefs,\n\t\t\tlink: from([authLink, errorLink, middleware, afterware, httpLink])\n\t\t});\n\t\treturn client;\n\t}\n}\n\nexport const client = new Gql().apollo;\n","import React, {useState} from 'react';\nimport {useLazyQuery, useMutation} from \"@apollo/client\";\nimport {LOGIN_USER, REGISTER_USER, USER_ME} from \"../../process/apollo/GqlData\";\nimport {LoginForm} from \"../components/LoginForm\";\nimport {Button, Card, Col, Container, Row} from \"react-bootstrap\";\nimport {RegisterForm} from \"../components/RegisterForm\";\nimport Auth from \"../../process/store/Auth\";\n\nenum EFormState {\n\t'login' = 'login',\n\t'register' = 'register'\n}\n\nexport const LoginPage = () => {\n\n\tconst auth = Auth.instance;\n\n\tconst [formState, setFormState] = useState<EFormState>(EFormState.login)\n\n\tconst [getCurrentUser, { loading: queryLoading }] = useLazyQuery(USER_ME, {\n\t\tfetchPolicy: 'no-cache',\n\t\tnotifyOnNetworkStatusChange: true,\n\t\tonCompleted({ me }) {\n\t\t\tauth.user = me;\n\t\t}\n\t})\n\n\tconst [login, { loading }] = useMutation(LOGIN_USER, {\n\t\terrorPolicy: 'all',\n\t\tnotifyOnNetworkStatusChange: true,\n\t\tonCompleted(data) {\n\t\t\tif (data && data.login) {\n\t\t\t\tauth.token = data.login.token as string;\n\t\t\t\tgetCurrentUser({ variables: {}});\n\t\t\t}\n\t\t},\n\t});\n\n\tconst [register, { loading: regLoading }] = useMutation(REGISTER_USER, {\n\t\terrorPolicy: 'all',\n\t\tnotifyOnNetworkStatusChange: true,\n\t\tonCompleted(data) {\n\t\t\tdebugger;\n\t\t\tif (data && data.register) {\n\t\t\t\tauth.logOut();\n\t\t\t\tauth.token = data.register.token as string\n\t\t\t\tgetCurrentUser({ variables: {}});\n\t\t\t}\n\t\t},\n\t})\n\n\tif (loading || queryLoading || regLoading) {\n\t\tconsole.log(`queries loading`);\n\t}\n\n\treturn (\n\t\t<Container fluid>\n\t\t\t<Row className=\"justify-content-center\">\n\t\t\t\t<Col sm={{span: 8}} md={{span: 8}} lg={{span: 6}} xl={{span: 6}} xs={12}>\n\t\t\t\t\t<Card>\n\t\t\t\t\t\t<Card.Header>{formState === EFormState.login ? 'Login' : 'Register'}</Card.Header>\n\t\t\t\t\t\t<Card.Body className=\"text-center\">\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tformState === EFormState.login ?\n\t\t\t\t\t\t\t\t\t(<LoginForm login={login}/>) :\n\t\t\t\t\t\t\t\t\t(<RegisterForm reg={register}/>)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t<div className=\"pt-3\">\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tformState === EFormState.login ?\n\t\t\t\t\t\t\t\t\t<Button variant=\"link\" onClick={ () => setFormState(EFormState.register)} >Register</Button> :\n\t\t\t\t\t\t\t\t\t<Button variant=\"link\" onClick={ () => setFormState(EFormState.login)} >Login</Button>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t</Card>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t</Container>\n\t);\n};\n","import PersistentStorage from \"./Storage\";\nimport {Constants} from \"../helpers/Models\";\nimport {isExpired} from \"react-jwt\";\nimport {isLoggedInVar, loggedUserVar, tokenVar} from \"../apollo/GqlClient\";\n\nexport default class Auth {\n\n\tprivate storage = PersistentStorage.instance;\n\n\tstatic _instance: Auth | null = null;\n\n\tconstructor() {\n\t}\n\n\tpublic static get instance(): Auth {\n\t\tif (!this._instance) {\n\t\t\tthis._instance = new Auth()\n\t\t}\n\t\treturn this._instance\n\t}\n\n\tpublic get authorized(): boolean {\n\t\tconst token = tokenVar();\n\t\tif (token && !isExpired(token)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic get initialAuthorized(): boolean {\n\t\tconst token = this.storage.getItem(Constants.TOKEN);\n\t\tif (token && !isExpired(token)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic logOut(): void {\n\t\tthis.storage.clear();\n\t\tloggedUserVar(null);\n\t\ttokenVar(null);\n\t\tisLoggedInVar(false);\n\t}\n\n\tpublic get initialToken(): string | null {\n\t\tconst token = this.storage.getItem(Constants.TOKEN);\n\t\treturn token ? token : null\n\t}\n\n\tpublic get token(): string | null {\n\t\treturn tokenVar()\n\t}\n\tpublic set token(token: string | null) {\n\t\tif (token) {\n\t\t\tthis.storage.setItem(Constants.TOKEN, token as string);\n\t\t} else {\n\t\t\tthis.storage.removeItem(Constants.TOKEN);\n\t\t}\n\t\ttokenVar(token);\n\t}\n\n\tpublic get initialUser(): any {\n\t\tconst user = this.storage.getItem(Constants.USER);\n\t\treturn user ? user : null;\n\t}\n\n\tpublic get user(): any {\n\t\treturn loggedUserVar()\n\t}\n\n\tpublic set user(user: any) {\n\t\tif (user) {\n\t\t\tthis.storage.setItem(Constants.USER, user);\n\t\t} else {\n\t\t\tthis.storage.removeItem(Constants.USER);\n\t\t}\n\n\t}\n\n}\n","import {useForm} from \"react-hook-form\";\nimport React, {useEffect, useState} from \"react\";\nimport {Button, Form} from \"react-bootstrap\";\nimport {IUser} from \"../../process/helpers/Models\";\nimport {useLazyQuery} from \"@apollo/client\";\nimport {GET_USER} from \"../../process/apollo/GqlData\";\nimport {RegisterFormVariables} from \"./RegisterForm\";\nimport {useParams} from \"react-router\";\n\nexport interface IEditProps {\n\tupdate: (a: {\n\t\tvariables: IUser\n\t}) => void,\n\tcreate: (a: {\n\t\tvariables: IUser\n\t}) => void\n}\n\nexport const EditForm = ({ update, create }: IEditProps) => {\n\n\tconst { id }: any = useParams();\n\n\tconst [userId, setUserId] = useState<number | null>(null)\n\n\tconst { register, handleSubmit, setValue, formState } = useForm();\n\n\tuseEffect(() => {\n\t\tsetUserId(null);\n\t\tif (id) {\n\t\t\tsetUserId(id);\n\t\t\tgetUser();\n\t\t}\n\t}, [id])\n\n\tuseEffect(() => {\n\t\tregister({ name: \"phone\" });\n\t\tregister({ name: \"password\" });\n\t\tregister({ name: \"firstName\" });\n\t\tregister({ name: \"lastName\" });\n\t\tregister({ name: \"email\" });\n\t\tregister({ name: \"role\" });\n\t}, [register]);\n\n\tconst [getUser, { loading }] = useLazyQuery(GET_USER, {\n\t\tvariables: {filter: {id: Number(userId)}},\n\t\tonCompleted({ user }) {\n\t\t\tif (user) {\n\t\t\t\tObject.entries(user).forEach( entry=> {\n\t\t\t\t\tconst key = entry[0];\n\t\t\t\t\tconst value = entry[1]\n\t\t\t\t\tsetValue(key, value);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t})\n\n\tconst onSubmit = (data: IUser) => {\n\t\tdebugger;\n\t\tif (id) {\n\t\t\tupdate( {variables: {...data, id: Number(id)} })\n\t\t} else {\n\t\t\tcreate( {variables: {...data} })\n\t\t}\n\t};\n\n\tconst handleChange = (event: any) => {\n\t\tevent.preventDefault();\n\t\tsetValue(event.target.name, event.target.value);\n\t};\n\n\tif (loading) {\n\t\tconsole.log('getting user');\n\t}\n\n\treturn (\n\t\t<Form onSubmit={handleSubmit(onSubmit)}>\n\t\t\t<Form.Group controlId=\"phone\">\n\t\t\t\t<Form.Label>Phone</Form.Label>\n\t\t\t\t<Form.Control\n\t\t\t\t\ttype=\"numeric\"\n\t\t\t\t\tplaceholder=\"Phone\"\n\t\t\t\t\tname=\"phone\" onChange={handleChange}\n\t\t\t\t\tref={register} />\n\t\t\t\t<Form.Text className=\"text-muted\">\n\t\t\t\t\tWe'll never share your email with anyone else.\n\t\t\t\t</Form.Text>\n\t\t\t</Form.Group>\n\t\t\t<Form.Group controlId=\"password\">\n\t\t\t\t<Form.Label>Password</Form.Label>\n\t\t\t\t<Form.Control type=\"password\"\n\t\t\t\t\t\t\t  placeholder=\"Password\"\n\t\t\t\t\t\t\t  name=\"password\"\n\t\t\t\t\t\t\t  onChange={handleChange}\n\t\t\t\t\t\t\t  ref={register} />\n\t\t\t</Form.Group>\n\t\t\t<Form.Group controlId=\"firstName\">\n\t\t\t\t<Form.Label>First Name</Form.Label>\n\t\t\t\t<Form.Control type=\"text\"\n\t\t\t\t\t\t\t  placeholder=\"First Name\"\n\t\t\t\t\t\t\t  name=\"firstName\"\n\t\t\t\t\t\t\t  onChange={handleChange}\n\t\t\t\t\t\t\t  ref={register} />\n\t\t\t</Form.Group>\n\t\t\t<Form.Group controlId=\"lastName\">\n\t\t\t\t<Form.Label>Last Name</Form.Label>\n\t\t\t\t<Form.Control type=\"text\"\n\t\t\t\t\t\t\t  placeholder=\"Last Name\"\n\t\t\t\t\t\t\t  name=\"lastName\"\n\t\t\t\t\t\t\t  onChange={handleChange}\n\t\t\t\t\t\t\t  ref={register} />\n\t\t\t</Form.Group>\n\t\t\t<Form.Group controlId=\"email\">\n\t\t\t\t<Form.Label>Email</Form.Label>\n\t\t\t\t<Form.Control type=\"email\"\n\t\t\t\t\t\t\t  placeholder=\"Email\"\n\t\t\t\t\t\t\t  name=\"email\"\n\t\t\t\t\t\t\t  onChange={handleChange}\n\t\t\t\t\t\t\t  ref={register} />\n\t\t\t</Form.Group>\n\t\t\t<Button variant=\"primary\" type=\"submit\" disabled={formState.isSubmitting}>\n\t\t\t\t{id ? 'Update' : 'Create'}\n\t\t\t</Button>\n\t\t</Form>\n\t)\n\n\n\n}\n","import React from 'react';\nimport {Col, Container, Row} from \"react-bootstrap\";\nimport {useMutation} from \"@apollo/client\";\nimport {CREATE_USER, UPDATE_USER} from \"../../process/apollo/GqlData\";\nimport {NotificationService} from \"../../process/services/NotificationService\";\nimport {EditForm} from \"../components/EditForm\";\n\nexport const UserPage = () => {\n\n\tconst [create, { loading: createLoading } ] = useMutation(CREATE_USER, {\n\t\terrorPolicy: 'all',\n\t\tnotifyOnNetworkStatusChange: true,\n\t\tonCompleted({ create }) {\n\t\t\tNotificationService.sendNotification({\n\t\t\t\tvariant: \"success\",\n\t\t\t\ttitle: 'Success',\n\t\t\t\tmessage: 'User successfully created'\n\t\t\t})\n\t\t},\n\t})\n\n\tconst [update, { loading: updateLoading } ] = useMutation(UPDATE_USER, {\n\t\terrorPolicy: 'all',\n\t\tnotifyOnNetworkStatusChange: true,\n\t\tonCompleted({ success, user }) {\n\t\t\tconsole.log(`success: ${success}`)\n\t\t\tNotificationService.sendNotification({\n\t\t\t\tvariant: \"success\",\n\t\t\t\ttitle: 'Success',\n\t\t\t\tmessage: 'User successfully updated'\n\t\t\t})\n\t\t},\n\t})\n\n\tif (createLoading || updateLoading) {\n\t\tconsole.log('process loading')\n\t}\n\n\treturn (\n\t\t<Container fluid>\n\t\t\t<Row className=\"justify-content-center pt-5\">\n\t\t\t\t<Col sm={{span: 8}} md={{span: 8}} lg={{span: 6}} xl={{span: 6}} xs={12}>\n\t\t\t\t\t<EditForm update={update} create={create} />\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t</Container>\n\t);\n};\n","import {HomePage} from \"../../ui/pages/Home\";\nimport {DetailsPage} from \"../../ui/pages/Details\";\nimport {UserPage} from \"../../ui/pages/User\";\nimport {UsersPage} from \"../../ui/pages/Users\";\nimport {HouseDoor, ListTask, People, Person} from \"react-bootstrap-icons\";\n\nexport const unauthorized = [\n\t{path: '/login'}\n]\n\nexport const routes = {\n\thome: { path: '/', title: 'Home', icon: HouseDoor},\n\tdetails: { path: '/details', title: 'Details', icon: ListTask},\n\tusers: { path: '/users', title: 'Users', icon: People},\n\tuserNew: { path: '/users/new', title: 'New user', icon: Person},\n\tuserEdit: { path: '/users/:id', title: 'Edit user', icon: Person},\n};\n\nexport const pages = [\n\t{ route: routes.home, exact: true, component: HomePage },\n\t{ route: routes.details, exact: true, component: DetailsPage },\n\t{ route: routes.userNew, exact: true, component: UserPage },\n\t{ route: routes.userEdit, exact: true, component: UserPage },\n\t{ route: routes.users, exact: true, component: UsersPage }\n];\n","import React from 'react';\nimport {Col, Container, Row} from \"react-bootstrap\";\nimport {useHistory} from \"react-router\";\n\nexport const HomePage = () => {\n\n\treturn (\n\t\t<Container fluid>\n\t\t\t<Row className={'justify-content-start'}>\n\t\t\t\t<Col>\n\t\t\t\t\tHome\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t</Container>\n\t);\n};\n","import React from 'react';\n\nexport const DetailsPage = () => {\n\n\treturn (\n\t\t<div className=\"home\">\n\t\t\t<h1>Details</h1>\n\t\t</div>\n\t);\n};\n","import React, {useState} from 'react';\nimport {Button, Col, Container, Modal, Row, Table} from \"react-bootstrap\";\nimport {useHistory} from \"react-router\";\nimport {useMutation, useQuery} from \"@apollo/client\";\nimport {DELETE_USER, GET_USERS} from \"../../process/apollo/GqlData\";\nimport {IUser} from \"../../process/helpers/Models\";\nimport {NotificationService, IMessage} from \"../../process/services/NotificationService\";\n\nexport const UsersPage = () => {\n\n\tconst history = useHistory();\n\tconst [open, setOpen] = useState<boolean>(false);\n\tconst [user, setUser] = useState<IUser>({phone: ''});\n\n\tconst { data, refetch } = useQuery(GET_USERS, {\n\t\tvariables: {},\n\t});\n\n\tconst [ removeUser, { loading }] = useMutation(DELETE_USER, {\n\t\terrorPolicy: 'all',\n\t\tnotifyOnNetworkStatusChange: true,\n\t\tonCompleted(data) {\n\t\t\tdebugger;\n\t\t\tif (data && data.delete) {\n\t\t\t\tconsole.log(data.delete.success);\n\t\t\t\tlet notification: IMessage;\n\t\t\t\tif (data.delete.success) {\n\t\t\t\t\tnotification = {\n\t\t\t\t\t\tvariant: 'success',\n\t\t\t\t\t\tmessage: 'User deleted',\n\t\t\t\t\t\ttitle: 'Success'\n\t\t\t\t\t}\n\t\t\t\t\trefetch();\n\t\t\t\t} else {\n\t\t\t\t\tnotification = {\n\t\t\t\t\t\tvariant: 'danger',\n\t\t\t\t\t\tmessage: 'Error deleting user',\n\t\t\t\t\t\ttitle: 'Error'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tNotificationService.sendNotification(notification);\n\t\t\t}\n\t\t},\n\n\t})\n\n\tconst addNewUser = () => {\n\t\thistory.push('/users/new');\n\t}\n\n\tconst editUser = (user: IUser) => {\n\t\thistory.push(`/users/${user.id}`);\n\t}\n\n\tconst deleteUser = (user: IUser) => {\n\t\tconsole.log(`id: ${user.id}`);\n\t\tsetUser(user);\n\t\thandleShow();\n\t}\n\n\tconst handleClose = () => {\n\t\tsetUser({phone: ''});\n\t\tsetOpen(false);\n\t}\n\tconst handleShow = () => {\n\t\tsetOpen(true);\n\t}\n\n\tconst confirmDelete = () => {\n\t\tsetOpen(false);\n\t\tremoveUser({variables: {id: user.id}})\n\t}\n\n\tconst dataTable = (data: any) =>\n\t\t(\n\t\t<Table striped bordered hover size=\"sm\" responsive=\"md\">\n\t\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<th>#</th>\n\t\t\t\t<th>Phone</th>\n\t\t\t\t<th>Actions</th>\n\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody>\n\t\t\t{\n\t\t\t\tdata.users.map( (user: IUser) =>\n\t\t\t\t\t(\n\t\t\t\t\t\t<tr key={user.id}>\n\t\t\t\t\t\t\t<td>{user.id}</td>\n\t\t\t\t\t\t\t<td>{user.phone}</td>\n\t\t\t\t\t\t\t<td className=\"text-right\">\n\t\t\t\t\t\t\t\t<Button variant=\"link\" color=\"danger\" onClick={ (e) => {e.preventDefault(); deleteUser(user)} }>Delete</Button>\n\t\t\t\t\t\t\t\t<Button variant=\"link\" color=\"primary\" onClick={ (e) => {e.preventDefault(); editUser(user)} }>Edit</Button>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t}\n\t\t\t</tbody>\n\n\t\t</Table>\n\t)\n\n\treturn (\n\t\t<div>\n\t\t\t<Container fluid>\n\t\t\t\t<Row className='justify-content-end'>\n\t\t\t\t\t<Col className=\"text-right pt-4 pb-4\">\n\t\t\t\t\t\t<Button onClick={addNewUser}>Add</Button>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row className={'justify-content-center'}>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t{ (data && data.users && data.users.length) ?\n\t\t\t\t\t\t\tdataTable(data)\n\t\t\t\t\t\t\t: (\n\t\t\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t\t\tNo Data Found\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t</Container>\n\n\t\t\t<Modal show={open} onHide={handleClose}>\n\t\t\t\t<Modal.Header closeButton>\n\t\t\t\t\t<Modal.Title>Delete User?</Modal.Title>\n\t\t\t\t</Modal.Header>\n\t\t\t\t<Modal.Body>{`Delete user with phone # ${user.phone}?`}</Modal.Body>\n\t\t\t\t<Modal.Footer>\n\t\t\t\t\t<Button variant=\"secondary\" onClick={handleClose}>\n\t\t\t\t\t\tClose\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button variant=\"danger\" onClick={confirmDelete}>\n\t\t\t\t\t\tDelete\n\t\t\t\t\t</Button>\n\t\t\t\t</Modal.Footer>\n\t\t\t</Modal>\n\t\t</div>\n\t);\n};\n","import React, {useEffect, useState} from \"react\";\nimport {Navbar} from \"react-bootstrap\";\nimport {routes} from \"../../process/helpers/Routes\";\nimport {BoxArrowRight} from \"react-bootstrap-icons\";\nimport {loggedUserVar} from \"../../process/apollo/GqlClient\";\nimport {IUser} from \"../../process/helpers/Models\";\nimport Auth from \"../../process/store/Auth\";\n\nexport const TopBar = ({title}: any) => {\n\n\tconst [currentUser, setCurrentUser] = useState<IUser | null>(null);\n\n\tuseEffect(() => {\n\t\tconst user = loggedUserVar();\n\t\tsetCurrentUser(user);\n\t}, [])\n\n\tconst auth = Auth.instance;\n\tconst menuItems = Object.values(routes).filter(value => (value.path !== '/users/new' && value.path !== '/users/:id'))\n\n\tconst logout = () => {\n\t\tauth.logOut();\n\t}\n\n\treturn (\n\t\t<Navbar bg=\"light\" expand=\"lg\">\n\t\t\t<Navbar.Brand>{title}</Navbar.Brand>\n\t\t\t<Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n\t\t\t<Navbar.Collapse id=\"basic-navbar-nav\" className=\"justify-content-end\">\n\t\t\t\t<Navbar.Text>\n\t\t\t\t\t<span className=\"pr-3\">\n\t\t\t\t\t\t{currentUser ? `User: ${currentUser.phone}` : ''}\n\t\t\t\t\t</span>\n\t\t\t\t\t<BoxArrowRight className=\"pointer\" style={{ fontSize: '1.75em' }} onClick={logout} />\n\t\t\t\t</Navbar.Text>\n\t\t\t</Navbar.Collapse>\n\t\t</Navbar>\n\n\t)\n}\n","import React from 'react';\n\nexport const NotFoundPage = () => {\n\n\treturn (\n\t\t<div className=\"home\">\n\t\t\t<h1>Page not found</h1>\n\t\t</div>\n\t);\n};\n","import React from \"react\";\nimport SideNav, { NavItem, NavIcon, NavText } from '@trendmicro/react-sidenav';\nimport {routes} from \"../../process/helpers/Routes\";\nimport {useHistory, useLocation} from \"react-router\";\n\nexport const SideBar = ({notify, select}: any) => {\n\n\tconst history = useHistory();\n\tconst location = useLocation();\n\n\tconst processToggle = (value: boolean) => {\n\t\tnotify(value)\n\t}\n\n\tconst processSelect = (path: string) => {\n\t\tconst route = findRoute(path);\n\t\tselect(route);\n\t\thistory.push(path)\n\t}\n\n\tconst findRoute = (path: string): any => {\n\t\treturn Object.values(routes).find( route => route.path === path);\n\t}\n\n\tconst menuItems = Object.values(routes).filter(value => (value.path !== '/users/new' && value.path !== '/users/:id'))\n\n\treturn (\n\n\t\t<SideNav\n\t\t\tonSelect={processSelect}\n\t\t\tonToggle={(processToggle)}\n\t\t\tclassName=\"nav-custom\"\n\t\t>\n\t\t\t<SideNav.Toggle />\n\t\t\t<SideNav.Nav defaultSelected={location.pathname}>\n\n\t\t\t\t{\n\t\t\t\t\tmenuItems.map(({ title, path, icon: Icon }, i) => (\n                        <NavItem eventKey={path} key={i}>\n\t\t\t\t\t\t\t<NavIcon>\n\t\t\t\t\t\t\t\t<Icon style={{ fontSize: '1.75em' }} />\n\t\t\t\t\t\t\t</NavIcon>\n\t\t\t\t\t\t\t<NavText>\n\t\t\t\t\t\t\t\t{title}\n\t\t\t\t\t\t\t</NavText>\n\t\t\t\t\t\t</NavItem>\n\t\t\t\t\t))\n\t\t\t\t}\n\t\t\t</SideNav.Nav>\n\n\t\t</SideNav>\n\n\t)\n}\n","import React, {useEffect, useState} from \"react\";\nimport {TopBar} from \"../components/Topbar\";\nimport {Route, Switch, useLocation, useRouteMatch} from \"react-router\";\nimport {pages, routes} from \"../../process/helpers/Routes\";\nimport {NotFoundPage} from \"../pages/NotFound\";\nimport {Container} from \"react-bootstrap\";\nimport {SideBar} from \"../components/SideBar\";\n\nexport const MainView = () => {\n\n\tconst location = useLocation();\n\tconst dynamic = useRouteMatch(`/users/:id`)\n\tconst [expanded, setExpanded] = useState(false);\n\tconst [route, setRoute] = useState({title: ''})\n\n\tuseEffect( () => {\n\t\tconst currentPath = dynamic ? dynamic.path : location.pathname;\n\t\tconst currentRoute = findRoute(currentPath);\n\t\tsetRoute(currentRoute);\n\t}, [location, dynamic]);\n\n\tconst findRoute = (path: string): any => {\n\t\treturn Object.values(routes).find( route => route.path === path);\n\t}\n\n\tconst passExpanded = (value: boolean) => {\n\t\tsetExpanded(value);\n\t}\n\tconst selectedRoute = (route: any) => {\n\t\tsetRoute(route);\n\t}\n\n\treturn (\n\t\t<Container fluid>\n\t\t\t<SideBar notify={passExpanded} select={selectedRoute} />\n\t\t\t<div className={`content ${expanded ? \"expanded\" : \"\"}`}>\n\t\t\t\t<TopBar title={route.title} />\n\t\t\t\t<Switch>\n\t\t\t\t\t{\n\t\t\t\t\t\tpages.map(\n\t\t\t\t\t\t\t({ route, exact, component }, index) =>\n\t\t\t\t\t\t\t\t<Route key={index} path={route.path} exact={exact} component={component} />\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t\t<Route path='*' exact={true} component={NotFoundPage} />\n\t\t\t\t</Switch>\n\t\t\t</div>\n\t\t</Container>\n\n\t)\n}\n","import {useQuery} from \"@apollo/client\";\nimport {IS_LOGGED_IN} from \"../../process/apollo/GqlData\";\nimport {useHistory} from \"react-router\";\nimport {LoginPage} from \"../pages/Login\";\nimport React, {useEffect} from \"react\";\nimport {MainView} from \"./MainView\";\n\nexport const Root = () => {\n\n\tconst history = useHistory()\n\tconst { data } = useQuery(IS_LOGGED_IN);\n\n\tuseEffect( () => {\n\t\tif (!data.isLoggedIn) {\n\t\t\thistory.push('/');\n\t\t}\n\t}, [history, data])\n\n\treturn data.isLoggedIn ? <MainView /> : <LoginPage />\n}\n","import React, {useEffect, useState} from \"react\";\nimport {Alert, Button} from \"react-bootstrap\";\nimport {IMessage, NotificationService, TVariant} from \"../../process/services/NotificationService\";\n\nexport const Notification = () => {\n\n\tconst initialMessage: any = {\n\t\tvariant: \"success\",\n\t\ttitle: '',\n\t\tmessage: ''\n\t}\n\tconst autoCloseInterval = 4000;\n\tconst closeAlert = () => {\n\t\tsetCurrentMessage(initialMessage);\n\t\tsetShow(false);\n\t}\n\n\tconst [show, setShow] = useState(false);\n\tconst [currentMessage, setCurrentMessage] = useState(initialMessage);\n\n\tuseEffect(() => {\n\t\tconst subscription = NotificationService.onNotification().subscribe(\n\t\t\t{\n\t\t\t\tnext: ( notification: any ) => {\n\t\t\t\t\tif (notification) {\n\t\t\t\t\t\tsetCurrentMessage({...notification});\n\t\t\t\t\t\tsetShow(true);\n\t\t\t\t\t\tsetTimeout(() => closeAlert(), autoCloseInterval);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcloseAlert();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\terror: err => {\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t\treturn subscription.unsubscribe;\n\t}, [])\n\n\treturn (\n\t\t<Alert className=\"notification\" show={show} variant={currentMessage.variant} onClose={() => setShow(false)} dismissible>\n\t\t\t<Alert.Heading>{currentMessage.title}</Alert.Heading>\n\t\t\t<p>\n\t\t\t\t{currentMessage.message}\n\t\t\t</p>\n\t\t</Alert>\n\t)\n\n}\n","import {useEffect, useState} from \"react\";\nimport {Spinner} from \"react-bootstrap\";\nimport {LoadingService} from \"../../process/services/LoadingService\";\n\nexport const Loading = () => {\n\n\tconst [show, setShow] = useState(false);\n\n\tuseEffect( () => {\n\t\tconst subscriber = LoadingService.onLoading().subscribe({\n\t\t\tnext: (value: boolean) => {\n\t\t\t\tsetShow(value);\n\t\t\t}\n\t\t});\n\t\treturn subscriber.unsubscribe();\n\t}, [])\n\n\tconst spinner = (\n\t\t<div className=\"overlay\" style={show ? {display: 'block'} : {display: 'none'}} >\n\t\t\t<Spinner className=\"spinner\" animation=\"border\" role=\"status\" variant=\"light\">\n\t\t\t\t<span className=\"sr-only\">Loading...</span>\n\t\t\t</Spinner>\n\t\t</div>\n\t)\n\n\treturn spinner;\n\n}\n","import React from 'react';\nimport './App.scss';\nimport {Root} from \"./ui/containers/Root\";\nimport {Notification} from \"./ui/components/Notivfication\";\nimport {Loading} from \"./ui/components/Loading\";\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Root/>\n\t\t\t<Notification/>\n\t\t\t<Loading />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\nimport {ApolloProvider} from \"@apollo/client\";\n\nimport {client} from './process/apollo/GqlClient';\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}